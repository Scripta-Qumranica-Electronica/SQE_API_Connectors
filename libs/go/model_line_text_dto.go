/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LineTextDTO struct for LineTextDTO
type LineTextDTO struct {
	Licence string `json:"licence"`
	Editors map[string]EditorDTO `json:"editors"`
	LineId int32 `json:"lineId"`
	LineName string `json:"lineName"`
	EditorId int32 `json:"editorId"`
	Signs []SignDTO `json:"signs"`
}

// NewLineTextDTO instantiates a new LineTextDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineTextDTO(licence string, editors map[string]EditorDTO, lineId int32, lineName string, editorId int32, signs []SignDTO, ) *LineTextDTO {
	this := LineTextDTO{}
	this.Licence = licence
	this.Editors = editors
	this.LineId = lineId
	this.LineName = lineName
	this.EditorId = editorId
	this.Signs = signs
	return &this
}

// NewLineTextDTOWithDefaults instantiates a new LineTextDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineTextDTOWithDefaults() *LineTextDTO {
	this := LineTextDTO{}
	return &this
}

// GetLicence returns the Licence field value
func (o *LineTextDTO) GetLicence() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Licence
}

// GetLicenceOk returns a tuple with the Licence field value
// and a boolean to check if the value has been set.
func (o *LineTextDTO) GetLicenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Licence, true
}

// SetLicence sets field value
func (o *LineTextDTO) SetLicence(v string) {
	o.Licence = v
}

// GetEditors returns the Editors field value
func (o *LineTextDTO) GetEditors() map[string]EditorDTO {
	if o == nil  {
		var ret map[string]EditorDTO
		return ret
	}

	return o.Editors
}

// GetEditorsOk returns a tuple with the Editors field value
// and a boolean to check if the value has been set.
func (o *LineTextDTO) GetEditorsOk() (*map[string]EditorDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Editors, true
}

// SetEditors sets field value
func (o *LineTextDTO) SetEditors(v map[string]EditorDTO) {
	o.Editors = v
}

// GetLineId returns the LineId field value
func (o *LineTextDTO) GetLineId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.LineId
}

// GetLineIdOk returns a tuple with the LineId field value
// and a boolean to check if the value has been set.
func (o *LineTextDTO) GetLineIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LineId, true
}

// SetLineId sets field value
func (o *LineTextDTO) SetLineId(v int32) {
	o.LineId = v
}

// GetLineName returns the LineName field value
func (o *LineTextDTO) GetLineName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.LineName
}

// GetLineNameOk returns a tuple with the LineName field value
// and a boolean to check if the value has been set.
func (o *LineTextDTO) GetLineNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LineName, true
}

// SetLineName sets field value
func (o *LineTextDTO) SetLineName(v string) {
	o.LineName = v
}

// GetEditorId returns the EditorId field value
func (o *LineTextDTO) GetEditorId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.EditorId
}

// GetEditorIdOk returns a tuple with the EditorId field value
// and a boolean to check if the value has been set.
func (o *LineTextDTO) GetEditorIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EditorId, true
}

// SetEditorId sets field value
func (o *LineTextDTO) SetEditorId(v int32) {
	o.EditorId = v
}

// GetSigns returns the Signs field value
func (o *LineTextDTO) GetSigns() []SignDTO {
	if o == nil  {
		var ret []SignDTO
		return ret
	}

	return o.Signs
}

// GetSignsOk returns a tuple with the Signs field value
// and a boolean to check if the value has been set.
func (o *LineTextDTO) GetSignsOk() (*[]SignDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Signs, true
}

// SetSigns sets field value
func (o *LineTextDTO) SetSigns(v []SignDTO) {
	o.Signs = v
}

func (o LineTextDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["licence"] = o.Licence
	}
	if true {
		toSerialize["editors"] = o.Editors
	}
	if true {
		toSerialize["lineId"] = o.LineId
	}
	if true {
		toSerialize["lineName"] = o.LineName
	}
	if true {
		toSerialize["editorId"] = o.EditorId
	}
	if true {
		toSerialize["signs"] = o.Signs
	}
	return json.Marshal(toSerialize)
}

type NullableLineTextDTO struct {
	value *LineTextDTO
	isSet bool
}

func (v NullableLineTextDTO) Get() *LineTextDTO {
	return v.value
}

func (v *NullableLineTextDTO) Set(val *LineTextDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableLineTextDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableLineTextDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineTextDTO(val *LineTextDTO) *NullableLineTextDTO {
	return &NullableLineTextDTO{value: val, isSet: true}
}

func (v NullableLineTextDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineTextDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


