/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DeleteDTO struct for DeleteDTO
type DeleteDTO struct {
	Entity EditionEntities `json:"entity"`
	Ids []int32 `json:"ids"`
}

// NewDeleteDTO instantiates a new DeleteDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteDTO(entity EditionEntities, ids []int32, ) *DeleteDTO {
	this := DeleteDTO{}
	this.Entity = entity
	this.Ids = ids
	return &this
}

// NewDeleteDTOWithDefaults instantiates a new DeleteDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteDTOWithDefaults() *DeleteDTO {
	this := DeleteDTO{}
	return &this
}

// GetEntity returns the Entity field value
func (o *DeleteDTO) GetEntity() EditionEntities {
	if o == nil  {
		var ret EditionEntities
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *DeleteDTO) GetEntityOk() (*EditionEntities, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *DeleteDTO) SetEntity(v EditionEntities) {
	o.Entity = v
}

// GetIds returns the Ids field value
func (o *DeleteDTO) GetIds() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *DeleteDTO) GetIdsOk() (*[]int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Ids, true
}

// SetIds sets field value
func (o *DeleteDTO) SetIds(v []int32) {
	o.Ids = v
}

func (o DeleteDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entity"] = o.Entity
	}
	if true {
		toSerialize["ids"] = o.Ids
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteDTO struct {
	value *DeleteDTO
	isSet bool
}

func (v NullableDeleteDTO) Get() *DeleteDTO {
	return v.value
}

func (v *NullableDeleteDTO) Set(val *DeleteDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteDTO(val *DeleteDTO) *NullableDeleteDTO {
	return &NullableDeleteDTO{value: val, isSet: true}
}

func (v NullableDeleteDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


