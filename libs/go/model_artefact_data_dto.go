/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ArtefactDataDTO struct for ArtefactDataDTO
type ArtefactDataDTO struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
}

// NewArtefactDataDTO instantiates a new ArtefactDataDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtefactDataDTO(id int32, name string, ) *ArtefactDataDTO {
	this := ArtefactDataDTO{}
	this.Id = id
	this.Name = name
	return &this
}

// NewArtefactDataDTOWithDefaults instantiates a new ArtefactDataDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtefactDataDTOWithDefaults() *ArtefactDataDTO {
	this := ArtefactDataDTO{}
	return &this
}

// GetId returns the Id field value
func (o *ArtefactDataDTO) GetId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ArtefactDataDTO) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ArtefactDataDTO) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ArtefactDataDTO) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ArtefactDataDTO) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ArtefactDataDTO) SetName(v string) {
	o.Name = v
}

func (o ArtefactDataDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableArtefactDataDTO struct {
	value *ArtefactDataDTO
	isSet bool
}

func (v NullableArtefactDataDTO) Get() *ArtefactDataDTO {
	return v.value
}

func (v *NullableArtefactDataDTO) Set(val *ArtefactDataDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableArtefactDataDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableArtefactDataDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtefactDataDTO(val *ArtefactDataDTO) *NullableArtefactDataDTO {
	return &NullableArtefactDataDTO{value: val, isSet: true}
}

func (v NullableArtefactDataDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtefactDataDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


