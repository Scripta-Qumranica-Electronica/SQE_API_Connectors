/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// TextApiService TextApi service
type TextApiService service

type ApiV1EditionsEditionIdLinesLineIdGetRequest struct {
	ctx _context.Context
	ApiService *TextApiService
	editionId int32
	lineId int32
}


func (r ApiV1EditionsEditionIdLinesLineIdGetRequest) Execute() (LineTextDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdLinesLineIdGetExecute(r)
}

/*
 * V1EditionsEditionIdLinesLineIdGet Retrieves all signs and their data from the given line
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @param lineId Id of the line
 * @return ApiV1EditionsEditionIdLinesLineIdGetRequest
 */
func (a *TextApiService) V1EditionsEditionIdLinesLineIdGet(ctx _context.Context, editionId int32, lineId int32) ApiV1EditionsEditionIdLinesLineIdGetRequest {
	return ApiV1EditionsEditionIdLinesLineIdGetRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
		lineId: lineId,
	}
}

/*
 * Execute executes the request
 * @return LineTextDTO
 */
func (a *TextApiService) V1EditionsEditionIdLinesLineIdGetExecute(r ApiV1EditionsEditionIdLinesLineIdGetRequest) (LineTextDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LineTextDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TextApiService.V1EditionsEditionIdLinesLineIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/lines/{lineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lineId"+"}", _neturl.PathEscape(parameterToString(r.lineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdTextFragmentsGetRequest struct {
	ctx _context.Context
	ApiService *TextApiService
	editionId int32
}


func (r ApiV1EditionsEditionIdTextFragmentsGetRequest) Execute() (TextFragmentDataListDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdTextFragmentsGetExecute(r)
}

/*
 * V1EditionsEditionIdTextFragmentsGet Retrieves the ids of all Fragments of all fragments in the given edition of a scroll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @return ApiV1EditionsEditionIdTextFragmentsGetRequest
 */
func (a *TextApiService) V1EditionsEditionIdTextFragmentsGet(ctx _context.Context, editionId int32) ApiV1EditionsEditionIdTextFragmentsGetRequest {
	return ApiV1EditionsEditionIdTextFragmentsGetRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
	}
}

/*
 * Execute executes the request
 * @return TextFragmentDataListDTO
 */
func (a *TextApiService) V1EditionsEditionIdTextFragmentsGetExecute(r ApiV1EditionsEditionIdTextFragmentsGetRequest) (TextFragmentDataListDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TextFragmentDataListDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TextApiService.V1EditionsEditionIdTextFragmentsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/text-fragments"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdTextFragmentsPostRequest struct {
	ctx _context.Context
	ApiService *TextApiService
	editionId int32
	createTextFragmentDTO *CreateTextFragmentDTO
}

func (r ApiV1EditionsEditionIdTextFragmentsPostRequest) CreateTextFragmentDTO(createTextFragmentDTO CreateTextFragmentDTO) ApiV1EditionsEditionIdTextFragmentsPostRequest {
	r.createTextFragmentDTO = &createTextFragmentDTO
	return r
}

func (r ApiV1EditionsEditionIdTextFragmentsPostRequest) Execute() (TextFragmentDataDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdTextFragmentsPostExecute(r)
}

/*
 * V1EditionsEditionIdTextFragmentsPost Creates a new text fragment in the given edition of a scroll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @return ApiV1EditionsEditionIdTextFragmentsPostRequest
 */
func (a *TextApiService) V1EditionsEditionIdTextFragmentsPost(ctx _context.Context, editionId int32) ApiV1EditionsEditionIdTextFragmentsPostRequest {
	return ApiV1EditionsEditionIdTextFragmentsPostRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
	}
}

/*
 * Execute executes the request
 * @return TextFragmentDataDTO
 */
func (a *TextApiService) V1EditionsEditionIdTextFragmentsPostExecute(r ApiV1EditionsEditionIdTextFragmentsPostRequest) (TextFragmentDataDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TextFragmentDataDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TextApiService.V1EditionsEditionIdTextFragmentsPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/text-fragments"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTextFragmentDTO
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGetRequest struct {
	ctx _context.Context
	ApiService *TextApiService
	editionId int32
	textFragmentId int32
}


func (r ApiV1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGetRequest) Execute() (ArtefactDataListDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGetExecute(r)
}

/*
 * V1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGet Retrieves the ids of all Artefacts in the given textFragmentName
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @param textFragmentId Id of the text fragment
 * @return ApiV1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGetRequest
 */
func (a *TextApiService) V1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGet(ctx _context.Context, editionId int32, textFragmentId int32) ApiV1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGetRequest {
	return ApiV1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGetRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
		textFragmentId: textFragmentId,
	}
}

/*
 * Execute executes the request
 * @return ArtefactDataListDTO
 */
func (a *TextApiService) V1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGetExecute(r ApiV1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGetRequest) (ArtefactDataListDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ArtefactDataListDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TextApiService.V1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/text-fragments/{textFragmentId}/artefacts"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"textFragmentId"+"}", _neturl.PathEscape(parameterToString(r.textFragmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdTextFragmentsTextFragmentIdGetRequest struct {
	ctx _context.Context
	ApiService *TextApiService
	editionId int32
	textFragmentId int32
}


func (r ApiV1EditionsEditionIdTextFragmentsTextFragmentIdGetRequest) Execute() (TextEditionDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdTextFragmentsTextFragmentIdGetExecute(r)
}

/*
 * V1EditionsEditionIdTextFragmentsTextFragmentIdGet Retrieves all signs and their data from the given textFragmentName
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @param textFragmentId Id of the text fragment
 * @return ApiV1EditionsEditionIdTextFragmentsTextFragmentIdGetRequest
 */
func (a *TextApiService) V1EditionsEditionIdTextFragmentsTextFragmentIdGet(ctx _context.Context, editionId int32, textFragmentId int32) ApiV1EditionsEditionIdTextFragmentsTextFragmentIdGetRequest {
	return ApiV1EditionsEditionIdTextFragmentsTextFragmentIdGetRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
		textFragmentId: textFragmentId,
	}
}

/*
 * Execute executes the request
 * @return TextEditionDTO
 */
func (a *TextApiService) V1EditionsEditionIdTextFragmentsTextFragmentIdGetExecute(r ApiV1EditionsEditionIdTextFragmentsTextFragmentIdGetRequest) (TextEditionDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TextEditionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TextApiService.V1EditionsEditionIdTextFragmentsTextFragmentIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/text-fragments/{textFragmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"textFragmentId"+"}", _neturl.PathEscape(parameterToString(r.textFragmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdTextFragmentsTextFragmentIdLinesGetRequest struct {
	ctx _context.Context
	ApiService *TextApiService
	editionId int32
	textFragmentId int32
}


func (r ApiV1EditionsEditionIdTextFragmentsTextFragmentIdLinesGetRequest) Execute() (LineDataListDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdTextFragmentsTextFragmentIdLinesGetExecute(r)
}

/*
 * V1EditionsEditionIdTextFragmentsTextFragmentIdLinesGet Retrieves the ids of all lines in the given textFragmentName
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @param textFragmentId Id of the text fragment
 * @return ApiV1EditionsEditionIdTextFragmentsTextFragmentIdLinesGetRequest
 */
func (a *TextApiService) V1EditionsEditionIdTextFragmentsTextFragmentIdLinesGet(ctx _context.Context, editionId int32, textFragmentId int32) ApiV1EditionsEditionIdTextFragmentsTextFragmentIdLinesGetRequest {
	return ApiV1EditionsEditionIdTextFragmentsTextFragmentIdLinesGetRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
		textFragmentId: textFragmentId,
	}
}

/*
 * Execute executes the request
 * @return LineDataListDTO
 */
func (a *TextApiService) V1EditionsEditionIdTextFragmentsTextFragmentIdLinesGetExecute(r ApiV1EditionsEditionIdTextFragmentsTextFragmentIdLinesGetRequest) (LineDataListDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LineDataListDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TextApiService.V1EditionsEditionIdTextFragmentsTextFragmentIdLinesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/text-fragments/{textFragmentId}/lines"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"textFragmentId"+"}", _neturl.PathEscape(parameterToString(r.textFragmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdTextFragmentsTextFragmentIdPutRequest struct {
	ctx _context.Context
	ApiService *TextApiService
	editionId int32
	textFragmentId int32
	updateTextFragmentDTO *UpdateTextFragmentDTO
}

func (r ApiV1EditionsEditionIdTextFragmentsTextFragmentIdPutRequest) UpdateTextFragmentDTO(updateTextFragmentDTO UpdateTextFragmentDTO) ApiV1EditionsEditionIdTextFragmentsTextFragmentIdPutRequest {
	r.updateTextFragmentDTO = &updateTextFragmentDTO
	return r
}

func (r ApiV1EditionsEditionIdTextFragmentsTextFragmentIdPutRequest) Execute() (TextFragmentDataDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdTextFragmentsTextFragmentIdPutExecute(r)
}

/*
 * V1EditionsEditionIdTextFragmentsTextFragmentIdPut Updates the specified text fragment with the submitted properties
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Edition of the text fragment being updates
 * @param textFragmentId Id of the text fragment being updates
 * @return ApiV1EditionsEditionIdTextFragmentsTextFragmentIdPutRequest
 */
func (a *TextApiService) V1EditionsEditionIdTextFragmentsTextFragmentIdPut(ctx _context.Context, editionId int32, textFragmentId int32) ApiV1EditionsEditionIdTextFragmentsTextFragmentIdPutRequest {
	return ApiV1EditionsEditionIdTextFragmentsTextFragmentIdPutRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
		textFragmentId: textFragmentId,
	}
}

/*
 * Execute executes the request
 * @return TextFragmentDataDTO
 */
func (a *TextApiService) V1EditionsEditionIdTextFragmentsTextFragmentIdPutExecute(r ApiV1EditionsEditionIdTextFragmentsTextFragmentIdPutRequest) (TextFragmentDataDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TextFragmentDataDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TextApiService.V1EditionsEditionIdTextFragmentsTextFragmentIdPut")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/text-fragments/{textFragmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"textFragmentId"+"}", _neturl.PathEscape(parameterToString(r.textFragmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateTextFragmentDTO
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
