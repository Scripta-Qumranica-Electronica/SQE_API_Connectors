/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateAttributeDTO struct for UpdateAttributeDTO
type UpdateAttributeDTO struct {
	CreateValues []CreateAttributeValueDTO `json:"createValues"`
	UpdateValues []UpdateAttributeValueDTO `json:"updateValues"`
	DeleteValues []int32 `json:"deleteValues"`
	Editable *bool `json:"editable,omitempty"`
	Removable *bool `json:"removable,omitempty"`
	Repeatable *bool `json:"repeatable,omitempty"`
	BatchEditable *bool `json:"batchEditable,omitempty"`
}

// NewUpdateAttributeDTO instantiates a new UpdateAttributeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAttributeDTO(createValues []CreateAttributeValueDTO, updateValues []UpdateAttributeValueDTO, deleteValues []int32, ) *UpdateAttributeDTO {
	this := UpdateAttributeDTO{}
	this.CreateValues = createValues
	this.UpdateValues = updateValues
	this.DeleteValues = deleteValues
	return &this
}

// NewUpdateAttributeDTOWithDefaults instantiates a new UpdateAttributeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAttributeDTOWithDefaults() *UpdateAttributeDTO {
	this := UpdateAttributeDTO{}
	return &this
}

// GetCreateValues returns the CreateValues field value
func (o *UpdateAttributeDTO) GetCreateValues() []CreateAttributeValueDTO {
	if o == nil  {
		var ret []CreateAttributeValueDTO
		return ret
	}

	return o.CreateValues
}

// GetCreateValuesOk returns a tuple with the CreateValues field value
// and a boolean to check if the value has been set.
func (o *UpdateAttributeDTO) GetCreateValuesOk() (*[]CreateAttributeValueDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreateValues, true
}

// SetCreateValues sets field value
func (o *UpdateAttributeDTO) SetCreateValues(v []CreateAttributeValueDTO) {
	o.CreateValues = v
}

// GetUpdateValues returns the UpdateValues field value
func (o *UpdateAttributeDTO) GetUpdateValues() []UpdateAttributeValueDTO {
	if o == nil  {
		var ret []UpdateAttributeValueDTO
		return ret
	}

	return o.UpdateValues
}

// GetUpdateValuesOk returns a tuple with the UpdateValues field value
// and a boolean to check if the value has been set.
func (o *UpdateAttributeDTO) GetUpdateValuesOk() (*[]UpdateAttributeValueDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpdateValues, true
}

// SetUpdateValues sets field value
func (o *UpdateAttributeDTO) SetUpdateValues(v []UpdateAttributeValueDTO) {
	o.UpdateValues = v
}

// GetDeleteValues returns the DeleteValues field value
func (o *UpdateAttributeDTO) GetDeleteValues() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}

	return o.DeleteValues
}

// GetDeleteValuesOk returns a tuple with the DeleteValues field value
// and a boolean to check if the value has been set.
func (o *UpdateAttributeDTO) GetDeleteValuesOk() (*[]int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DeleteValues, true
}

// SetDeleteValues sets field value
func (o *UpdateAttributeDTO) SetDeleteValues(v []int32) {
	o.DeleteValues = v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *UpdateAttributeDTO) GetEditable() bool {
	if o == nil || o.Editable == nil {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAttributeDTO) GetEditableOk() (*bool, bool) {
	if o == nil || o.Editable == nil {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *UpdateAttributeDTO) HasEditable() bool {
	if o != nil && o.Editable != nil {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *UpdateAttributeDTO) SetEditable(v bool) {
	o.Editable = &v
}

// GetRemovable returns the Removable field value if set, zero value otherwise.
func (o *UpdateAttributeDTO) GetRemovable() bool {
	if o == nil || o.Removable == nil {
		var ret bool
		return ret
	}
	return *o.Removable
}

// GetRemovableOk returns a tuple with the Removable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAttributeDTO) GetRemovableOk() (*bool, bool) {
	if o == nil || o.Removable == nil {
		return nil, false
	}
	return o.Removable, true
}

// HasRemovable returns a boolean if a field has been set.
func (o *UpdateAttributeDTO) HasRemovable() bool {
	if o != nil && o.Removable != nil {
		return true
	}

	return false
}

// SetRemovable gets a reference to the given bool and assigns it to the Removable field.
func (o *UpdateAttributeDTO) SetRemovable(v bool) {
	o.Removable = &v
}

// GetRepeatable returns the Repeatable field value if set, zero value otherwise.
func (o *UpdateAttributeDTO) GetRepeatable() bool {
	if o == nil || o.Repeatable == nil {
		var ret bool
		return ret
	}
	return *o.Repeatable
}

// GetRepeatableOk returns a tuple with the Repeatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAttributeDTO) GetRepeatableOk() (*bool, bool) {
	if o == nil || o.Repeatable == nil {
		return nil, false
	}
	return o.Repeatable, true
}

// HasRepeatable returns a boolean if a field has been set.
func (o *UpdateAttributeDTO) HasRepeatable() bool {
	if o != nil && o.Repeatable != nil {
		return true
	}

	return false
}

// SetRepeatable gets a reference to the given bool and assigns it to the Repeatable field.
func (o *UpdateAttributeDTO) SetRepeatable(v bool) {
	o.Repeatable = &v
}

// GetBatchEditable returns the BatchEditable field value if set, zero value otherwise.
func (o *UpdateAttributeDTO) GetBatchEditable() bool {
	if o == nil || o.BatchEditable == nil {
		var ret bool
		return ret
	}
	return *o.BatchEditable
}

// GetBatchEditableOk returns a tuple with the BatchEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAttributeDTO) GetBatchEditableOk() (*bool, bool) {
	if o == nil || o.BatchEditable == nil {
		return nil, false
	}
	return o.BatchEditable, true
}

// HasBatchEditable returns a boolean if a field has been set.
func (o *UpdateAttributeDTO) HasBatchEditable() bool {
	if o != nil && o.BatchEditable != nil {
		return true
	}

	return false
}

// SetBatchEditable gets a reference to the given bool and assigns it to the BatchEditable field.
func (o *UpdateAttributeDTO) SetBatchEditable(v bool) {
	o.BatchEditable = &v
}

func (o UpdateAttributeDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["createValues"] = o.CreateValues
	}
	if true {
		toSerialize["updateValues"] = o.UpdateValues
	}
	if true {
		toSerialize["deleteValues"] = o.DeleteValues
	}
	if o.Editable != nil {
		toSerialize["editable"] = o.Editable
	}
	if o.Removable != nil {
		toSerialize["removable"] = o.Removable
	}
	if o.Repeatable != nil {
		toSerialize["repeatable"] = o.Repeatable
	}
	if o.BatchEditable != nil {
		toSerialize["batchEditable"] = o.BatchEditable
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateAttributeDTO struct {
	value *UpdateAttributeDTO
	isSet bool
}

func (v NullableUpdateAttributeDTO) Get() *UpdateAttributeDTO {
	return v.value
}

func (v *NullableUpdateAttributeDTO) Set(val *UpdateAttributeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAttributeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAttributeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAttributeDTO(val *UpdateAttributeDTO) *NullableUpdateAttributeDTO {
	return &NullableUpdateAttributeDTO{value: val, isSet: true}
}

func (v NullableUpdateAttributeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAttributeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


