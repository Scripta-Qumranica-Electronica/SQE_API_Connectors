/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserDTO struct for UserDTO
type UserDTO struct {
	UserId int32 `json:"userId"`
	Email string `json:"email"`
}

// NewUserDTO instantiates a new UserDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDTO(userId int32, email string, ) *UserDTO {
	this := UserDTO{}
	this.UserId = userId
	this.Email = email
	return &this
}

// NewUserDTOWithDefaults instantiates a new UserDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDTOWithDefaults() *UserDTO {
	this := UserDTO{}
	return &this
}

// GetUserId returns the UserId field value
func (o *UserDTO) GetUserId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserDTO) GetUserIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserDTO) SetUserId(v int32) {
	o.UserId = v
}

// GetEmail returns the Email field value
func (o *UserDTO) GetEmail() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserDTO) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserDTO) SetEmail(v string) {
	o.Email = v
}

func (o UserDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["userId"] = o.UserId
	}
	if true {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableUserDTO struct {
	value *UserDTO
	isSet bool
}

func (v NullableUserDTO) Get() *UserDTO {
	return v.value
}

func (v *NullableUserDTO) Set(val *UserDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDTO(val *UserDTO) *NullableUserDTO {
	return &NullableUserDTO{value: val, isSet: true}
}

func (v NullableUserDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


