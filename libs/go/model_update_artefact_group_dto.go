/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateArtefactGroupDTO struct for UpdateArtefactGroupDTO
type UpdateArtefactGroupDTO struct {
	Name NullableString `json:"name,omitempty"`
	Artefacts []int32 `json:"artefacts"`
}

// NewUpdateArtefactGroupDTO instantiates a new UpdateArtefactGroupDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateArtefactGroupDTO(artefacts []int32, ) *UpdateArtefactGroupDTO {
	this := UpdateArtefactGroupDTO{}
	this.Artefacts = artefacts
	return &this
}

// NewUpdateArtefactGroupDTOWithDefaults instantiates a new UpdateArtefactGroupDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateArtefactGroupDTOWithDefaults() *UpdateArtefactGroupDTO {
	this := UpdateArtefactGroupDTO{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateArtefactGroupDTO) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateArtefactGroupDTO) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateArtefactGroupDTO) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdateArtefactGroupDTO) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateArtefactGroupDTO) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateArtefactGroupDTO) UnsetName() {
	o.Name.Unset()
}

// GetArtefacts returns the Artefacts field value
func (o *UpdateArtefactGroupDTO) GetArtefacts() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}

	return o.Artefacts
}

// GetArtefactsOk returns a tuple with the Artefacts field value
// and a boolean to check if the value has been set.
func (o *UpdateArtefactGroupDTO) GetArtefactsOk() (*[]int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Artefacts, true
}

// SetArtefacts sets field value
func (o *UpdateArtefactGroupDTO) SetArtefacts(v []int32) {
	o.Artefacts = v
}

func (o UpdateArtefactGroupDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if true {
		toSerialize["artefacts"] = o.Artefacts
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateArtefactGroupDTO struct {
	value *UpdateArtefactGroupDTO
	isSet bool
}

func (v NullableUpdateArtefactGroupDTO) Get() *UpdateArtefactGroupDTO {
	return v.value
}

func (v *NullableUpdateArtefactGroupDTO) Set(val *UpdateArtefactGroupDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateArtefactGroupDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateArtefactGroupDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateArtefactGroupDTO(val *UpdateArtefactGroupDTO) *NullableUpdateArtefactGroupDTO {
	return &NullableUpdateArtefactGroupDTO{value: val, isSet: true}
}

func (v NullableUpdateArtefactGroupDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateArtefactGroupDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


