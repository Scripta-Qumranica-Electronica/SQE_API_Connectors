/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SignInterpretationDTO struct for SignInterpretationDTO
type SignInterpretationDTO struct {
	SignInterpretationId int32 `json:"signInterpretationId"`
	NextSignInterpretations []NextSignInterpretationDTO `json:"nextSignInterpretations"`
	Attributes []InterpretationAttributeDTO `json:"attributes"`
	Rois []InterpretationRoiDTO `json:"rois"`
	Commentary NullableCommentaryDTO `json:"commentary,omitempty"`
	Character NullableString `json:"character,omitempty"`
	IsVariant bool `json:"isVariant"`
}

// NewSignInterpretationDTO instantiates a new SignInterpretationDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignInterpretationDTO(signInterpretationId int32, nextSignInterpretations []NextSignInterpretationDTO, attributes []InterpretationAttributeDTO, rois []InterpretationRoiDTO, isVariant bool, ) *SignInterpretationDTO {
	this := SignInterpretationDTO{}
	this.SignInterpretationId = signInterpretationId
	this.NextSignInterpretations = nextSignInterpretations
	this.Attributes = attributes
	this.Rois = rois
	this.IsVariant = isVariant
	return &this
}

// NewSignInterpretationDTOWithDefaults instantiates a new SignInterpretationDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignInterpretationDTOWithDefaults() *SignInterpretationDTO {
	this := SignInterpretationDTO{}
	return &this
}

// GetSignInterpretationId returns the SignInterpretationId field value
func (o *SignInterpretationDTO) GetSignInterpretationId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SignInterpretationId
}

// GetSignInterpretationIdOk returns a tuple with the SignInterpretationId field value
// and a boolean to check if the value has been set.
func (o *SignInterpretationDTO) GetSignInterpretationIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SignInterpretationId, true
}

// SetSignInterpretationId sets field value
func (o *SignInterpretationDTO) SetSignInterpretationId(v int32) {
	o.SignInterpretationId = v
}

// GetNextSignInterpretations returns the NextSignInterpretations field value
func (o *SignInterpretationDTO) GetNextSignInterpretations() []NextSignInterpretationDTO {
	if o == nil  {
		var ret []NextSignInterpretationDTO
		return ret
	}

	return o.NextSignInterpretations
}

// GetNextSignInterpretationsOk returns a tuple with the NextSignInterpretations field value
// and a boolean to check if the value has been set.
func (o *SignInterpretationDTO) GetNextSignInterpretationsOk() (*[]NextSignInterpretationDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NextSignInterpretations, true
}

// SetNextSignInterpretations sets field value
func (o *SignInterpretationDTO) SetNextSignInterpretations(v []NextSignInterpretationDTO) {
	o.NextSignInterpretations = v
}

// GetAttributes returns the Attributes field value
func (o *SignInterpretationDTO) GetAttributes() []InterpretationAttributeDTO {
	if o == nil  {
		var ret []InterpretationAttributeDTO
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *SignInterpretationDTO) GetAttributesOk() (*[]InterpretationAttributeDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *SignInterpretationDTO) SetAttributes(v []InterpretationAttributeDTO) {
	o.Attributes = v
}

// GetRois returns the Rois field value
func (o *SignInterpretationDTO) GetRois() []InterpretationRoiDTO {
	if o == nil  {
		var ret []InterpretationRoiDTO
		return ret
	}

	return o.Rois
}

// GetRoisOk returns a tuple with the Rois field value
// and a boolean to check if the value has been set.
func (o *SignInterpretationDTO) GetRoisOk() (*[]InterpretationRoiDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Rois, true
}

// SetRois sets field value
func (o *SignInterpretationDTO) SetRois(v []InterpretationRoiDTO) {
	o.Rois = v
}

// GetCommentary returns the Commentary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SignInterpretationDTO) GetCommentary() CommentaryDTO {
	if o == nil || o.Commentary.Get() == nil {
		var ret CommentaryDTO
		return ret
	}
	return *o.Commentary.Get()
}

// GetCommentaryOk returns a tuple with the Commentary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignInterpretationDTO) GetCommentaryOk() (*CommentaryDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Commentary.Get(), o.Commentary.IsSet()
}

// HasCommentary returns a boolean if a field has been set.
func (o *SignInterpretationDTO) HasCommentary() bool {
	if o != nil && o.Commentary.IsSet() {
		return true
	}

	return false
}

// SetCommentary gets a reference to the given NullableCommentaryDTO and assigns it to the Commentary field.
func (o *SignInterpretationDTO) SetCommentary(v CommentaryDTO) {
	o.Commentary.Set(&v)
}
// SetCommentaryNil sets the value for Commentary to be an explicit nil
func (o *SignInterpretationDTO) SetCommentaryNil() {
	o.Commentary.Set(nil)
}

// UnsetCommentary ensures that no value is present for Commentary, not even an explicit nil
func (o *SignInterpretationDTO) UnsetCommentary() {
	o.Commentary.Unset()
}

// GetCharacter returns the Character field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SignInterpretationDTO) GetCharacter() string {
	if o == nil || o.Character.Get() == nil {
		var ret string
		return ret
	}
	return *o.Character.Get()
}

// GetCharacterOk returns a tuple with the Character field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignInterpretationDTO) GetCharacterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Character.Get(), o.Character.IsSet()
}

// HasCharacter returns a boolean if a field has been set.
func (o *SignInterpretationDTO) HasCharacter() bool {
	if o != nil && o.Character.IsSet() {
		return true
	}

	return false
}

// SetCharacter gets a reference to the given NullableString and assigns it to the Character field.
func (o *SignInterpretationDTO) SetCharacter(v string) {
	o.Character.Set(&v)
}
// SetCharacterNil sets the value for Character to be an explicit nil
func (o *SignInterpretationDTO) SetCharacterNil() {
	o.Character.Set(nil)
}

// UnsetCharacter ensures that no value is present for Character, not even an explicit nil
func (o *SignInterpretationDTO) UnsetCharacter() {
	o.Character.Unset()
}

// GetIsVariant returns the IsVariant field value
func (o *SignInterpretationDTO) GetIsVariant() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.IsVariant
}

// GetIsVariantOk returns a tuple with the IsVariant field value
// and a boolean to check if the value has been set.
func (o *SignInterpretationDTO) GetIsVariantOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsVariant, true
}

// SetIsVariant sets field value
func (o *SignInterpretationDTO) SetIsVariant(v bool) {
	o.IsVariant = v
}

func (o SignInterpretationDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["signInterpretationId"] = o.SignInterpretationId
	}
	if true {
		toSerialize["nextSignInterpretations"] = o.NextSignInterpretations
	}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	if true {
		toSerialize["rois"] = o.Rois
	}
	if o.Commentary.IsSet() {
		toSerialize["commentary"] = o.Commentary.Get()
	}
	if o.Character.IsSet() {
		toSerialize["character"] = o.Character.Get()
	}
	if true {
		toSerialize["isVariant"] = o.IsVariant
	}
	return json.Marshal(toSerialize)
}

type NullableSignInterpretationDTO struct {
	value *SignInterpretationDTO
	isSet bool
}

func (v NullableSignInterpretationDTO) Get() *SignInterpretationDTO {
	return v.value
}

func (v *NullableSignInterpretationDTO) Set(val *SignInterpretationDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSignInterpretationDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSignInterpretationDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignInterpretationDTO(val *SignInterpretationDTO) *NullableSignInterpretationDTO {
	return &NullableSignInterpretationDTO{value: val, isSet: true}
}

func (v NullableSignInterpretationDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignInterpretationDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


