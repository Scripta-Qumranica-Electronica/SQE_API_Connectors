/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TranslateDTO struct for TranslateDTO
type TranslateDTO struct {
	X int32 `json:"x"`
	Y int32 `json:"y"`
}

// NewTranslateDTO instantiates a new TranslateDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateDTO(x int32, y int32, ) *TranslateDTO {
	this := TranslateDTO{}
	this.X = x
	this.Y = y
	return &this
}

// NewTranslateDTOWithDefaults instantiates a new TranslateDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateDTOWithDefaults() *TranslateDTO {
	this := TranslateDTO{}
	return &this
}

// GetX returns the X field value
func (o *TranslateDTO) GetX() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *TranslateDTO) GetXOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *TranslateDTO) SetX(v int32) {
	o.X = v
}

// GetY returns the Y field value
func (o *TranslateDTO) GetY() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *TranslateDTO) GetYOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *TranslateDTO) SetY(v int32) {
	o.Y = v
}

func (o TranslateDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["x"] = o.X
	}
	if true {
		toSerialize["y"] = o.Y
	}
	return json.Marshal(toSerialize)
}

type NullableTranslateDTO struct {
	value *TranslateDTO
	isSet bool
}

func (v NullableTranslateDTO) Get() *TranslateDTO {
	return v.value
}

func (v *NullableTranslateDTO) Set(val *TranslateDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateDTO(val *TranslateDTO) *NullableTranslateDTO {
	return &NullableTranslateDTO{value: val, isSet: true}
}

func (v NullableTranslateDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


