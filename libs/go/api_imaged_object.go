/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// ImagedObjectApiService ImagedObjectApi service
type ImagedObjectApiService service

type ApiV1EditionsEditionIdImagedObjectsGetRequest struct {
	ctx _context.Context
	ApiService *ImagedObjectApiService
	editionId int32
	optional *[]string
}

func (r ApiV1EditionsEditionIdImagedObjectsGetRequest) Optional(optional []string) ApiV1EditionsEditionIdImagedObjectsGetRequest {
	r.optional = &optional
	return r
}

func (r ApiV1EditionsEditionIdImagedObjectsGetRequest) Execute() (ImagedObjectListDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdImagedObjectsGetExecute(r)
}

/*
 * V1EditionsEditionIdImagedObjectsGet Provides a listing of imaged objects related to the specified edition, can include images and also their masks with  optional.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Unique Id of the desired edition
 * @return ApiV1EditionsEditionIdImagedObjectsGetRequest
 */
func (a *ImagedObjectApiService) V1EditionsEditionIdImagedObjectsGet(ctx _context.Context, editionId int32) ApiV1EditionsEditionIdImagedObjectsGetRequest {
	return ApiV1EditionsEditionIdImagedObjectsGetRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
	}
}

/*
 * Execute executes the request
 * @return ImagedObjectListDTO
 */
func (a *ImagedObjectApiService) V1EditionsEditionIdImagedObjectsGetExecute(r ApiV1EditionsEditionIdImagedObjectsGetRequest) (ImagedObjectListDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ImagedObjectListDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImagedObjectApiService.V1EditionsEditionIdImagedObjectsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/imaged-objects"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.optional != nil {
		t := *r.optional
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("optional", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("optional", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdImagedObjectsImagedObjectIdGetRequest struct {
	ctx _context.Context
	ApiService *ImagedObjectApiService
	editionId int32
	imagedObjectId string
	optional *[]string
}

func (r ApiV1EditionsEditionIdImagedObjectsImagedObjectIdGetRequest) Optional(optional []string) ApiV1EditionsEditionIdImagedObjectsImagedObjectIdGetRequest {
	r.optional = &optional
	return r
}

func (r ApiV1EditionsEditionIdImagedObjectsImagedObjectIdGetRequest) Execute() (ImagedObjectDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdImagedObjectsImagedObjectIdGetExecute(r)
}

/*
 * V1EditionsEditionIdImagedObjectsImagedObjectIdGet Provides information for the specified imaged object related to the specified edition, can include images and also  their masks with optional.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Unique Id of the desired edition
 * @param imagedObjectId Unique Id of the desired object from the imaging Institution
 * @return ApiV1EditionsEditionIdImagedObjectsImagedObjectIdGetRequest
 */
func (a *ImagedObjectApiService) V1EditionsEditionIdImagedObjectsImagedObjectIdGet(ctx _context.Context, editionId int32, imagedObjectId string) ApiV1EditionsEditionIdImagedObjectsImagedObjectIdGetRequest {
	return ApiV1EditionsEditionIdImagedObjectsImagedObjectIdGetRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
		imagedObjectId: imagedObjectId,
	}
}

/*
 * Execute executes the request
 * @return ImagedObjectDTO
 */
func (a *ImagedObjectApiService) V1EditionsEditionIdImagedObjectsImagedObjectIdGetExecute(r ApiV1EditionsEditionIdImagedObjectsImagedObjectIdGetRequest) (ImagedObjectDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ImagedObjectDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImagedObjectApiService.V1EditionsEditionIdImagedObjectsImagedObjectIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/imaged-objects/{imagedObjectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"imagedObjectId"+"}", _neturl.PathEscape(parameterToString(r.imagedObjectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.optional != nil {
		t := *r.optional
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("optional", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("optional", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ImagedObjectsImagedObjectIdGetRequest struct {
	ctx _context.Context
	ApiService *ImagedObjectApiService
	imagedObjectId string
}


func (r ApiV1ImagedObjectsImagedObjectIdGetRequest) Execute() (SimpleImageListDTO, *_nethttp.Response, error) {
	return r.ApiService.V1ImagedObjectsImagedObjectIdGetExecute(r)
}

/*
 * V1ImagedObjectsImagedObjectIdGet Provides information for the specified imaged object.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param imagedObjectId Unique Id of the desired object from the imaging Institution
 * @return ApiV1ImagedObjectsImagedObjectIdGetRequest
 */
func (a *ImagedObjectApiService) V1ImagedObjectsImagedObjectIdGet(ctx _context.Context, imagedObjectId string) ApiV1ImagedObjectsImagedObjectIdGetRequest {
	return ApiV1ImagedObjectsImagedObjectIdGetRequest{
		ApiService: a,
		ctx: ctx,
		imagedObjectId: imagedObjectId,
	}
}

/*
 * Execute executes the request
 * @return SimpleImageListDTO
 */
func (a *ImagedObjectApiService) V1ImagedObjectsImagedObjectIdGetExecute(r ApiV1ImagedObjectsImagedObjectIdGetRequest) (SimpleImageListDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SimpleImageListDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImagedObjectApiService.V1ImagedObjectsImagedObjectIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/imaged-objects/{imagedObjectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"imagedObjectId"+"}", _neturl.PathEscape(parameterToString(r.imagedObjectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ImagedObjectsImagedObjectIdTextFragmentsGetRequest struct {
	ctx _context.Context
	ApiService *ImagedObjectApiService
	imagedObjectId string
}


func (r ApiV1ImagedObjectsImagedObjectIdTextFragmentsGetRequest) Execute() (ImagedObjectTextFragmentMatchListDTO, *_nethttp.Response, error) {
	return r.ApiService.V1ImagedObjectsImagedObjectIdTextFragmentsGetExecute(r)
}

/*
 * V1ImagedObjectsImagedObjectIdTextFragmentsGet Provides a list of all text fragments that should correspond to the imaged object.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param imagedObjectId Id of the imaged object
 * @return ApiV1ImagedObjectsImagedObjectIdTextFragmentsGetRequest
 */
func (a *ImagedObjectApiService) V1ImagedObjectsImagedObjectIdTextFragmentsGet(ctx _context.Context, imagedObjectId string) ApiV1ImagedObjectsImagedObjectIdTextFragmentsGetRequest {
	return ApiV1ImagedObjectsImagedObjectIdTextFragmentsGetRequest{
		ApiService: a,
		ctx: ctx,
		imagedObjectId: imagedObjectId,
	}
}

/*
 * Execute executes the request
 * @return ImagedObjectTextFragmentMatchListDTO
 */
func (a *ImagedObjectApiService) V1ImagedObjectsImagedObjectIdTextFragmentsGetExecute(r ApiV1ImagedObjectsImagedObjectIdTextFragmentsGetRequest) (ImagedObjectTextFragmentMatchListDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ImagedObjectTextFragmentMatchListDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImagedObjectApiService.V1ImagedObjectsImagedObjectIdTextFragmentsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/imaged-objects/{imagedObjectId}/text-fragments"
	localVarPath = strings.Replace(localVarPath, "{"+"imagedObjectId"+"}", _neturl.PathEscape(parameterToString(r.imagedObjectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ImagedObjectsInstitutionsGetRequest struct {
	ctx _context.Context
	ApiService *ImagedObjectApiService
}


func (r ApiV1ImagedObjectsInstitutionsGetRequest) Execute() (ImageInstitutionListDTO, *_nethttp.Response, error) {
	return r.ApiService.V1ImagedObjectsInstitutionsGetExecute(r)
}

/*
 * V1ImagedObjectsInstitutionsGet Provides a list of all institutional image providers.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiV1ImagedObjectsInstitutionsGetRequest
 */
func (a *ImagedObjectApiService) V1ImagedObjectsInstitutionsGet(ctx _context.Context) ApiV1ImagedObjectsInstitutionsGetRequest {
	return ApiV1ImagedObjectsInstitutionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ImageInstitutionListDTO
 */
func (a *ImagedObjectApiService) V1ImagedObjectsInstitutionsGetExecute(r ApiV1ImagedObjectsInstitutionsGetRequest) (ImageInstitutionListDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ImageInstitutionListDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImagedObjectApiService.V1ImagedObjectsInstitutionsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/imaged-objects/institutions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ImagedObjectsInstitutionsInstitutionNameGetRequest struct {
	ctx _context.Context
	ApiService *ImagedObjectApiService
	institutionName string
}


func (r ApiV1ImagedObjectsInstitutionsInstitutionNameGetRequest) Execute() (InstitutionalImageListDTO, *_nethttp.Response, error) {
	return r.ApiService.V1ImagedObjectsInstitutionsInstitutionNameGetExecute(r)
}

/*
 * V1ImagedObjectsInstitutionsInstitutionNameGet Provides a list of all institutional image providers.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param institutionName
 * @return ApiV1ImagedObjectsInstitutionsInstitutionNameGetRequest
 */
func (a *ImagedObjectApiService) V1ImagedObjectsInstitutionsInstitutionNameGet(ctx _context.Context, institutionName string) ApiV1ImagedObjectsInstitutionsInstitutionNameGetRequest {
	return ApiV1ImagedObjectsInstitutionsInstitutionNameGetRequest{
		ApiService: a,
		ctx: ctx,
		institutionName: institutionName,
	}
}

/*
 * Execute executes the request
 * @return InstitutionalImageListDTO
 */
func (a *ImagedObjectApiService) V1ImagedObjectsInstitutionsInstitutionNameGetExecute(r ApiV1ImagedObjectsInstitutionsInstitutionNameGetRequest) (InstitutionalImageListDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InstitutionalImageListDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImagedObjectApiService.V1ImagedObjectsInstitutionsInstitutionNameGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/imaged-objects/institutions/{institutionName}"
	localVarPath = strings.Replace(localVarPath, "{"+"institutionName"+"}", _neturl.PathEscape(parameterToString(r.institutionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
