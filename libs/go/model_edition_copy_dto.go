/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EditionCopyDTO struct for EditionCopyDTO
type EditionCopyDTO struct {
	Name NullableString `json:"name,omitempty"`
	CopyrightHolder NullableString `json:"copyrightHolder,omitempty"`
	Collaborators NullableString `json:"collaborators,omitempty"`
}

// NewEditionCopyDTO instantiates a new EditionCopyDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditionCopyDTO() *EditionCopyDTO {
	this := EditionCopyDTO{}
	return &this
}

// NewEditionCopyDTOWithDefaults instantiates a new EditionCopyDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditionCopyDTOWithDefaults() *EditionCopyDTO {
	this := EditionCopyDTO{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditionCopyDTO) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditionCopyDTO) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *EditionCopyDTO) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *EditionCopyDTO) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *EditionCopyDTO) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *EditionCopyDTO) UnsetName() {
	o.Name.Unset()
}

// GetCopyrightHolder returns the CopyrightHolder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditionCopyDTO) GetCopyrightHolder() string {
	if o == nil || o.CopyrightHolder.Get() == nil {
		var ret string
		return ret
	}
	return *o.CopyrightHolder.Get()
}

// GetCopyrightHolderOk returns a tuple with the CopyrightHolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditionCopyDTO) GetCopyrightHolderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CopyrightHolder.Get(), o.CopyrightHolder.IsSet()
}

// HasCopyrightHolder returns a boolean if a field has been set.
func (o *EditionCopyDTO) HasCopyrightHolder() bool {
	if o != nil && o.CopyrightHolder.IsSet() {
		return true
	}

	return false
}

// SetCopyrightHolder gets a reference to the given NullableString and assigns it to the CopyrightHolder field.
func (o *EditionCopyDTO) SetCopyrightHolder(v string) {
	o.CopyrightHolder.Set(&v)
}
// SetCopyrightHolderNil sets the value for CopyrightHolder to be an explicit nil
func (o *EditionCopyDTO) SetCopyrightHolderNil() {
	o.CopyrightHolder.Set(nil)
}

// UnsetCopyrightHolder ensures that no value is present for CopyrightHolder, not even an explicit nil
func (o *EditionCopyDTO) UnsetCopyrightHolder() {
	o.CopyrightHolder.Unset()
}

// GetCollaborators returns the Collaborators field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditionCopyDTO) GetCollaborators() string {
	if o == nil || o.Collaborators.Get() == nil {
		var ret string
		return ret
	}
	return *o.Collaborators.Get()
}

// GetCollaboratorsOk returns a tuple with the Collaborators field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditionCopyDTO) GetCollaboratorsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Collaborators.Get(), o.Collaborators.IsSet()
}

// HasCollaborators returns a boolean if a field has been set.
func (o *EditionCopyDTO) HasCollaborators() bool {
	if o != nil && o.Collaborators.IsSet() {
		return true
	}

	return false
}

// SetCollaborators gets a reference to the given NullableString and assigns it to the Collaborators field.
func (o *EditionCopyDTO) SetCollaborators(v string) {
	o.Collaborators.Set(&v)
}
// SetCollaboratorsNil sets the value for Collaborators to be an explicit nil
func (o *EditionCopyDTO) SetCollaboratorsNil() {
	o.Collaborators.Set(nil)
}

// UnsetCollaborators ensures that no value is present for Collaborators, not even an explicit nil
func (o *EditionCopyDTO) UnsetCollaborators() {
	o.Collaborators.Unset()
}

func (o EditionCopyDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.CopyrightHolder.IsSet() {
		toSerialize["copyrightHolder"] = o.CopyrightHolder.Get()
	}
	if o.Collaborators.IsSet() {
		toSerialize["collaborators"] = o.Collaborators.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEditionCopyDTO struct {
	value *EditionCopyDTO
	isSet bool
}

func (v NullableEditionCopyDTO) Get() *EditionCopyDTO {
	return v.value
}

func (v *NullableEditionCopyDTO) Set(val *EditionCopyDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableEditionCopyDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableEditionCopyDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditionCopyDTO(val *EditionCopyDTO) *NullableEditionCopyDTO {
	return &NullableEditionCopyDTO{value: val, isSet: true}
}

func (v NullableEditionCopyDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditionCopyDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


