/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CharacterShapeDTO struct for CharacterShapeDTO
type CharacterShapeDTO struct {
	Id int32 `json:"id"`
	Character string `json:"character"`
	Polygon string `json:"polygon"`
	ImageURL string `json:"imageURL"`
	Rotation *float32 `json:"rotation,omitempty"`
	Attributes []string `json:"attributes"`
}

// NewCharacterShapeDTO instantiates a new CharacterShapeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCharacterShapeDTO(id int32, character string, polygon string, imageURL string, attributes []string, ) *CharacterShapeDTO {
	this := CharacterShapeDTO{}
	this.Id = id
	this.Character = character
	this.Polygon = polygon
	this.ImageURL = imageURL
	this.Attributes = attributes
	return &this
}

// NewCharacterShapeDTOWithDefaults instantiates a new CharacterShapeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCharacterShapeDTOWithDefaults() *CharacterShapeDTO {
	this := CharacterShapeDTO{}
	return &this
}

// GetId returns the Id field value
func (o *CharacterShapeDTO) GetId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CharacterShapeDTO) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CharacterShapeDTO) SetId(v int32) {
	o.Id = v
}

// GetCharacter returns the Character field value
func (o *CharacterShapeDTO) GetCharacter() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Character
}

// GetCharacterOk returns a tuple with the Character field value
// and a boolean to check if the value has been set.
func (o *CharacterShapeDTO) GetCharacterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Character, true
}

// SetCharacter sets field value
func (o *CharacterShapeDTO) SetCharacter(v string) {
	o.Character = v
}

// GetPolygon returns the Polygon field value
func (o *CharacterShapeDTO) GetPolygon() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Polygon
}

// GetPolygonOk returns a tuple with the Polygon field value
// and a boolean to check if the value has been set.
func (o *CharacterShapeDTO) GetPolygonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Polygon, true
}

// SetPolygon sets field value
func (o *CharacterShapeDTO) SetPolygon(v string) {
	o.Polygon = v
}

// GetImageURL returns the ImageURL field value
func (o *CharacterShapeDTO) GetImageURL() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ImageURL
}

// GetImageURLOk returns a tuple with the ImageURL field value
// and a boolean to check if the value has been set.
func (o *CharacterShapeDTO) GetImageURLOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ImageURL, true
}

// SetImageURL sets field value
func (o *CharacterShapeDTO) SetImageURL(v string) {
	o.ImageURL = v
}

// GetRotation returns the Rotation field value if set, zero value otherwise.
func (o *CharacterShapeDTO) GetRotation() float32 {
	if o == nil || o.Rotation == nil {
		var ret float32
		return ret
	}
	return *o.Rotation
}

// GetRotationOk returns a tuple with the Rotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CharacterShapeDTO) GetRotationOk() (*float32, bool) {
	if o == nil || o.Rotation == nil {
		return nil, false
	}
	return o.Rotation, true
}

// HasRotation returns a boolean if a field has been set.
func (o *CharacterShapeDTO) HasRotation() bool {
	if o != nil && o.Rotation != nil {
		return true
	}

	return false
}

// SetRotation gets a reference to the given float32 and assigns it to the Rotation field.
func (o *CharacterShapeDTO) SetRotation(v float32) {
	o.Rotation = &v
}

// GetAttributes returns the Attributes field value
func (o *CharacterShapeDTO) GetAttributes() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *CharacterShapeDTO) GetAttributesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *CharacterShapeDTO) SetAttributes(v []string) {
	o.Attributes = v
}

func (o CharacterShapeDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["character"] = o.Character
	}
	if true {
		toSerialize["polygon"] = o.Polygon
	}
	if true {
		toSerialize["imageURL"] = o.ImageURL
	}
	if o.Rotation != nil {
		toSerialize["rotation"] = o.Rotation
	}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableCharacterShapeDTO struct {
	value *CharacterShapeDTO
	isSet bool
}

func (v NullableCharacterShapeDTO) Get() *CharacterShapeDTO {
	return v.value
}

func (v *NullableCharacterShapeDTO) Set(val *CharacterShapeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCharacterShapeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCharacterShapeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharacterShapeDTO(val *CharacterShapeDTO) *NullableCharacterShapeDTO {
	return &NullableCharacterShapeDTO{value: val, isSet: true}
}

func (v NullableCharacterShapeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharacterShapeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


