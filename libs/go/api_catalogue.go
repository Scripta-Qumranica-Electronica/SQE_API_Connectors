/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// CatalogueApiService CatalogueApi service
type CatalogueApiService service

type ApiV1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDeleteRequest struct {
	ctx _context.Context
	ApiService *CatalogueApiService
	iaaEditionCatalogToTextFragmentId int32
}


func (r ApiV1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDeleteExecute(r)
}

/*
 * V1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDelete Remove an existing imaged object and text fragment match, which is not correct
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param iaaEditionCatalogToTextFragmentId The unique id of the match to confirm
 * @return ApiV1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDeleteRequest
 */
func (a *CatalogueApiService) V1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDelete(ctx _context.Context, iaaEditionCatalogToTextFragmentId int32) ApiV1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDeleteRequest {
	return ApiV1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		iaaEditionCatalogToTextFragmentId: iaaEditionCatalogToTextFragmentId,
	}
}

/*
 * Execute executes the request
 */
func (a *CatalogueApiService) V1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDeleteExecute(r ApiV1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogueApiService.V1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/catalogue/confirm-match/{iaaEditionCatalogToTextFragmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"iaaEditionCatalogToTextFragmentId"+"}", _neturl.PathEscape(parameterToString(r.iaaEditionCatalogToTextFragmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPostRequest struct {
	ctx _context.Context
	ApiService *CatalogueApiService
	iaaEditionCatalogToTextFragmentId int32
}


func (r ApiV1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPostExecute(r)
}

/*
 * V1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPost Confirm the correctness of an existing imaged object and text fragment match
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param iaaEditionCatalogToTextFragmentId The unique id of the match to confirm
 * @return ApiV1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPostRequest
 */
func (a *CatalogueApiService) V1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPost(ctx _context.Context, iaaEditionCatalogToTextFragmentId int32) ApiV1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPostRequest {
	return ApiV1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPostRequest{
		ApiService: a,
		ctx: ctx,
		iaaEditionCatalogToTextFragmentId: iaaEditionCatalogToTextFragmentId,
	}
}

/*
 * Execute executes the request
 */
func (a *CatalogueApiService) V1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPostExecute(r ApiV1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogueApiService.V1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/catalogue/confirm-match/{iaaEditionCatalogToTextFragmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"iaaEditionCatalogToTextFragmentId"+"}", _neturl.PathEscape(parameterToString(r.iaaEditionCatalogToTextFragmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGetRequest struct {
	ctx _context.Context
	ApiService *CatalogueApiService
	editionId int32
}


func (r ApiV1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGetRequest) Execute() (CatalogueMatchListDTO, *_nethttp.Response, error) {
	return r.ApiService.V1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGetExecute(r)
}

/*
 * V1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGet Get a listing of all corresponding imaged objects and transcribed text fragment in a specified edition
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Unique Id of the edition to search for imaged objects to text fragment matches
 * @return ApiV1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGetRequest
 */
func (a *CatalogueApiService) V1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGet(ctx _context.Context, editionId int32) ApiV1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGetRequest {
	return ApiV1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGetRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
	}
}

/*
 * Execute executes the request
 * @return CatalogueMatchListDTO
 */
func (a *CatalogueApiService) V1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGetExecute(r ApiV1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGetRequest) (CatalogueMatchListDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CatalogueMatchListDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogueApiService.V1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/catalogue/editions/{editionId}/imaged-object-text-fragment-matches"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1CatalogueImagedObjectsImagedObjectIdTextFragmentsGetRequest struct {
	ctx _context.Context
	ApiService *CatalogueApiService
	imagedObjectId string
}


func (r ApiV1CatalogueImagedObjectsImagedObjectIdTextFragmentsGetRequest) Execute() (CatalogueMatchListDTO, *_nethttp.Response, error) {
	return r.ApiService.V1CatalogueImagedObjectsImagedObjectIdTextFragmentsGetExecute(r)
}

/*
 * V1CatalogueImagedObjectsImagedObjectIdTextFragmentsGet Get a listing of all text fragments matches that correspond to an imaged object
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param imagedObjectId Id of imaged object to search for transcription matches
 * @return ApiV1CatalogueImagedObjectsImagedObjectIdTextFragmentsGetRequest
 */
func (a *CatalogueApiService) V1CatalogueImagedObjectsImagedObjectIdTextFragmentsGet(ctx _context.Context, imagedObjectId string) ApiV1CatalogueImagedObjectsImagedObjectIdTextFragmentsGetRequest {
	return ApiV1CatalogueImagedObjectsImagedObjectIdTextFragmentsGetRequest{
		ApiService: a,
		ctx: ctx,
		imagedObjectId: imagedObjectId,
	}
}

/*
 * Execute executes the request
 * @return CatalogueMatchListDTO
 */
func (a *CatalogueApiService) V1CatalogueImagedObjectsImagedObjectIdTextFragmentsGetExecute(r ApiV1CatalogueImagedObjectsImagedObjectIdTextFragmentsGetRequest) (CatalogueMatchListDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CatalogueMatchListDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogueApiService.V1CatalogueImagedObjectsImagedObjectIdTextFragmentsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/catalogue/imaged-objects/{imagedObjectId}/text-fragments"
	localVarPath = strings.Replace(localVarPath, "{"+"imagedObjectId"+"}", _neturl.PathEscape(parameterToString(r.imagedObjectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGetRequest struct {
	ctx _context.Context
	ApiService *CatalogueApiService
	manuscriptId int32
}


func (r ApiV1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGetRequest) Execute() (CatalogueMatchListDTO, *_nethttp.Response, error) {
	return r.ApiService.V1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGetExecute(r)
}

/*
 * V1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGet Get a listing of all corresponding imaged objects and transcribed text fragment in a specified manuscript
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param manuscriptId Unique Id of the manuscript to search for imaged objects to text fragment matches
 * @return ApiV1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGetRequest
 */
func (a *CatalogueApiService) V1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGet(ctx _context.Context, manuscriptId int32) ApiV1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGetRequest {
	return ApiV1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGetRequest{
		ApiService: a,
		ctx: ctx,
		manuscriptId: manuscriptId,
	}
}

/*
 * Execute executes the request
 * @return CatalogueMatchListDTO
 */
func (a *CatalogueApiService) V1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGetExecute(r ApiV1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGetRequest) (CatalogueMatchListDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CatalogueMatchListDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogueApiService.V1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/catalogue/manuscripts/{manuscriptId}/imaged-object-text-fragment-matches"
	localVarPath = strings.Replace(localVarPath, "{"+"manuscriptId"+"}", _neturl.PathEscape(parameterToString(r.manuscriptId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1CataloguePostRequest struct {
	ctx _context.Context
	ApiService *CatalogueApiService
	catalogueMatchInputDTO *CatalogueMatchInputDTO
}

func (r ApiV1CataloguePostRequest) CatalogueMatchInputDTO(catalogueMatchInputDTO CatalogueMatchInputDTO) ApiV1CataloguePostRequest {
	r.catalogueMatchInputDTO = &catalogueMatchInputDTO
	return r
}

func (r ApiV1CataloguePostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1CataloguePostExecute(r)
}

/*
 * V1CataloguePost Create a new matched pair for an imaged object and a text fragment along with the edition princeps information
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiV1CataloguePostRequest
 */
func (a *CatalogueApiService) V1CataloguePost(ctx _context.Context) ApiV1CataloguePostRequest {
	return ApiV1CataloguePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CatalogueApiService) V1CataloguePostExecute(r ApiV1CataloguePostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogueApiService.V1CataloguePost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/catalogue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.catalogueMatchInputDTO
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1CatalogueTextFragmentsTextFragmentIdImagedObjectsGetRequest struct {
	ctx _context.Context
	ApiService *CatalogueApiService
	textFragmentId int32
}


func (r ApiV1CatalogueTextFragmentsTextFragmentIdImagedObjectsGetRequest) Execute() (CatalogueMatchListDTO, *_nethttp.Response, error) {
	return r.ApiService.V1CatalogueTextFragmentsTextFragmentIdImagedObjectsGetExecute(r)
}

/*
 * V1CatalogueTextFragmentsTextFragmentIdImagedObjectsGet Get a listing of all imaged objects that matches that correspond to a transcribed text fragment
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param textFragmentId Unique Id of the text fragment to search for imaged object matches
 * @return ApiV1CatalogueTextFragmentsTextFragmentIdImagedObjectsGetRequest
 */
func (a *CatalogueApiService) V1CatalogueTextFragmentsTextFragmentIdImagedObjectsGet(ctx _context.Context, textFragmentId int32) ApiV1CatalogueTextFragmentsTextFragmentIdImagedObjectsGetRequest {
	return ApiV1CatalogueTextFragmentsTextFragmentIdImagedObjectsGetRequest{
		ApiService: a,
		ctx: ctx,
		textFragmentId: textFragmentId,
	}
}

/*
 * Execute executes the request
 * @return CatalogueMatchListDTO
 */
func (a *CatalogueApiService) V1CatalogueTextFragmentsTextFragmentIdImagedObjectsGetExecute(r ApiV1CatalogueTextFragmentsTextFragmentIdImagedObjectsGetRequest) (CatalogueMatchListDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CatalogueMatchListDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogueApiService.V1CatalogueTextFragmentsTextFragmentIdImagedObjectsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/catalogue/text-fragments/{textFragmentId}/imaged-objects"
	localVarPath = strings.Replace(localVarPath, "{"+"textFragmentId"+"}", _neturl.PathEscape(parameterToString(r.textFragmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
