/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SignInterpretationListDTO struct for SignInterpretationListDTO
type SignInterpretationListDTO struct {
	SignInterpretations []SignInterpretationDTO `json:"signInterpretations,omitempty"`
}

// NewSignInterpretationListDTO instantiates a new SignInterpretationListDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignInterpretationListDTO() *SignInterpretationListDTO {
	this := SignInterpretationListDTO{}
	return &this
}

// NewSignInterpretationListDTOWithDefaults instantiates a new SignInterpretationListDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignInterpretationListDTOWithDefaults() *SignInterpretationListDTO {
	this := SignInterpretationListDTO{}
	return &this
}

// GetSignInterpretations returns the SignInterpretations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SignInterpretationListDTO) GetSignInterpretations() []SignInterpretationDTO {
	if o == nil  {
		var ret []SignInterpretationDTO
		return ret
	}
	return o.SignInterpretations
}

// GetSignInterpretationsOk returns a tuple with the SignInterpretations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignInterpretationListDTO) GetSignInterpretationsOk() (*[]SignInterpretationDTO, bool) {
	if o == nil || o.SignInterpretations == nil {
		return nil, false
	}
	return &o.SignInterpretations, true
}

// HasSignInterpretations returns a boolean if a field has been set.
func (o *SignInterpretationListDTO) HasSignInterpretations() bool {
	if o != nil && o.SignInterpretations != nil {
		return true
	}

	return false
}

// SetSignInterpretations gets a reference to the given []SignInterpretationDTO and assigns it to the SignInterpretations field.
func (o *SignInterpretationListDTO) SetSignInterpretations(v []SignInterpretationDTO) {
	o.SignInterpretations = v
}

func (o SignInterpretationListDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SignInterpretations != nil {
		toSerialize["signInterpretations"] = o.SignInterpretations
	}
	return json.Marshal(toSerialize)
}

type NullableSignInterpretationListDTO struct {
	value *SignInterpretationListDTO
	isSet bool
}

func (v NullableSignInterpretationListDTO) Get() *SignInterpretationListDTO {
	return v.value
}

func (v *NullableSignInterpretationListDTO) Set(val *SignInterpretationListDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSignInterpretationListDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSignInterpretationListDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignInterpretationListDTO(val *SignInterpretationListDTO) *NullableSignInterpretationListDTO {
	return &NullableSignInterpretationListDTO{value: val, isSet: true}
}

func (v NullableSignInterpretationListDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignInterpretationListDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


