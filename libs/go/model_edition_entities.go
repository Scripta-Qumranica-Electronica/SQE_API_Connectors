/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EditionEntities the model 'EditionEntities'
type EditionEntities string

// List of EditionEntities
const (
	EDITION EditionEntities = "edition"
	ARTEFACT EditionEntities = "artefact"
	ARTEFACT_GROUP EditionEntities = "artefactGroup"
	ATTRIBUTE EditionEntities = "attribute"
	TEXT_FRAGMENT EditionEntities = "textFragment"
	LINE EditionEntities = "line"
	SIGN_INTERPRETATION EditionEntities = "signInterpretation"
	ROI EditionEntities = "roi"
)

func (v *EditionEntities) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EditionEntities(value)
	for _, existing := range []EditionEntities{ "edition", "artefact", "artefactGroup", "attribute", "textFragment", "line", "signInterpretation", "roi",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EditionEntities", value)
}

// Ptr returns reference to EditionEntities value
func (v EditionEntities) Ptr() *EditionEntities {
	return &v
}

type NullableEditionEntities struct {
	value *EditionEntities
	isSet bool
}

func (v NullableEditionEntities) Get() *EditionEntities {
	return v.value
}

func (v *NullableEditionEntities) Set(val *EditionEntities) {
	v.value = val
	v.isSet = true
}

func (v NullableEditionEntities) IsSet() bool {
	return v.isSet
}

func (v *NullableEditionEntities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditionEntities(val *EditionEntities) *NullableEditionEntities {
	return &NullableEditionEntities{value: val, isSet: true}
}

func (v NullableEditionEntities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditionEntities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

