/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CommentaryCreateDTO struct for CommentaryCreateDTO
type CommentaryCreateDTO struct {
	Commentary NullableString `json:"commentary,omitempty"`
}

// NewCommentaryCreateDTO instantiates a new CommentaryCreateDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentaryCreateDTO() *CommentaryCreateDTO {
	this := CommentaryCreateDTO{}
	return &this
}

// NewCommentaryCreateDTOWithDefaults instantiates a new CommentaryCreateDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentaryCreateDTOWithDefaults() *CommentaryCreateDTO {
	this := CommentaryCreateDTO{}
	return &this
}

// GetCommentary returns the Commentary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommentaryCreateDTO) GetCommentary() string {
	if o == nil || o.Commentary.Get() == nil {
		var ret string
		return ret
	}
	return *o.Commentary.Get()
}

// GetCommentaryOk returns a tuple with the Commentary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommentaryCreateDTO) GetCommentaryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Commentary.Get(), o.Commentary.IsSet()
}

// HasCommentary returns a boolean if a field has been set.
func (o *CommentaryCreateDTO) HasCommentary() bool {
	if o != nil && o.Commentary.IsSet() {
		return true
	}

	return false
}

// SetCommentary gets a reference to the given NullableString and assigns it to the Commentary field.
func (o *CommentaryCreateDTO) SetCommentary(v string) {
	o.Commentary.Set(&v)
}
// SetCommentaryNil sets the value for Commentary to be an explicit nil
func (o *CommentaryCreateDTO) SetCommentaryNil() {
	o.Commentary.Set(nil)
}

// UnsetCommentary ensures that no value is present for Commentary, not even an explicit nil
func (o *CommentaryCreateDTO) UnsetCommentary() {
	o.Commentary.Unset()
}

func (o CommentaryCreateDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Commentary.IsSet() {
		toSerialize["commentary"] = o.Commentary.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCommentaryCreateDTO struct {
	value *CommentaryCreateDTO
	isSet bool
}

func (v NullableCommentaryCreateDTO) Get() *CommentaryCreateDTO {
	return v.value
}

func (v *NullableCommentaryCreateDTO) Set(val *CommentaryCreateDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentaryCreateDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentaryCreateDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentaryCreateDTO(val *CommentaryCreateDTO) *NullableCommentaryCreateDTO {
	return &NullableCommentaryCreateDTO{value: val, isSet: true}
}

func (v NullableCommentaryCreateDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentaryCreateDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


