/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateArtefactPlacementDTO struct for UpdateArtefactPlacementDTO
type UpdateArtefactPlacementDTO struct {
	ArtefactId int32 `json:"artefactId"`
	IsPlaced bool `json:"isPlaced"`
	Placement NullablePlacementDTO `json:"placement,omitempty"`
}

// NewUpdateArtefactPlacementDTO instantiates a new UpdateArtefactPlacementDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateArtefactPlacementDTO(artefactId int32, isPlaced bool, ) *UpdateArtefactPlacementDTO {
	this := UpdateArtefactPlacementDTO{}
	this.ArtefactId = artefactId
	this.IsPlaced = isPlaced
	return &this
}

// NewUpdateArtefactPlacementDTOWithDefaults instantiates a new UpdateArtefactPlacementDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateArtefactPlacementDTOWithDefaults() *UpdateArtefactPlacementDTO {
	this := UpdateArtefactPlacementDTO{}
	return &this
}

// GetArtefactId returns the ArtefactId field value
func (o *UpdateArtefactPlacementDTO) GetArtefactId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.ArtefactId
}

// GetArtefactIdOk returns a tuple with the ArtefactId field value
// and a boolean to check if the value has been set.
func (o *UpdateArtefactPlacementDTO) GetArtefactIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ArtefactId, true
}

// SetArtefactId sets field value
func (o *UpdateArtefactPlacementDTO) SetArtefactId(v int32) {
	o.ArtefactId = v
}

// GetIsPlaced returns the IsPlaced field value
func (o *UpdateArtefactPlacementDTO) GetIsPlaced() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.IsPlaced
}

// GetIsPlacedOk returns a tuple with the IsPlaced field value
// and a boolean to check if the value has been set.
func (o *UpdateArtefactPlacementDTO) GetIsPlacedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsPlaced, true
}

// SetIsPlaced sets field value
func (o *UpdateArtefactPlacementDTO) SetIsPlaced(v bool) {
	o.IsPlaced = v
}

// GetPlacement returns the Placement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateArtefactPlacementDTO) GetPlacement() PlacementDTO {
	if o == nil || o.Placement.Get() == nil {
		var ret PlacementDTO
		return ret
	}
	return *o.Placement.Get()
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateArtefactPlacementDTO) GetPlacementOk() (*PlacementDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Placement.Get(), o.Placement.IsSet()
}

// HasPlacement returns a boolean if a field has been set.
func (o *UpdateArtefactPlacementDTO) HasPlacement() bool {
	if o != nil && o.Placement.IsSet() {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given NullablePlacementDTO and assigns it to the Placement field.
func (o *UpdateArtefactPlacementDTO) SetPlacement(v PlacementDTO) {
	o.Placement.Set(&v)
}
// SetPlacementNil sets the value for Placement to be an explicit nil
func (o *UpdateArtefactPlacementDTO) SetPlacementNil() {
	o.Placement.Set(nil)
}

// UnsetPlacement ensures that no value is present for Placement, not even an explicit nil
func (o *UpdateArtefactPlacementDTO) UnsetPlacement() {
	o.Placement.Unset()
}

func (o UpdateArtefactPlacementDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["artefactId"] = o.ArtefactId
	}
	if true {
		toSerialize["isPlaced"] = o.IsPlaced
	}
	if o.Placement.IsSet() {
		toSerialize["placement"] = o.Placement.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateArtefactPlacementDTO struct {
	value *UpdateArtefactPlacementDTO
	isSet bool
}

func (v NullableUpdateArtefactPlacementDTO) Get() *UpdateArtefactPlacementDTO {
	return v.value
}

func (v *NullableUpdateArtefactPlacementDTO) Set(val *UpdateArtefactPlacementDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateArtefactPlacementDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateArtefactPlacementDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateArtefactPlacementDTO(val *UpdateArtefactPlacementDTO) *NullableUpdateArtefactPlacementDTO {
	return &NullableUpdateArtefactPlacementDTO{value: val, isSet: true}
}

func (v NullableUpdateArtefactPlacementDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateArtefactPlacementDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


