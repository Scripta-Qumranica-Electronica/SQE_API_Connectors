/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ImagedObjectDTO struct for ImagedObjectDTO
type ImagedObjectDTO struct {
	Id string `json:"id"`
	Recto ImageStackDTO `json:"recto"`
	Verso ImageStackDTO `json:"verso"`
	Artefacts []ArtefactDTO `json:"artefacts"`
}

// NewImagedObjectDTO instantiates a new ImagedObjectDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImagedObjectDTO(id string, recto ImageStackDTO, verso ImageStackDTO, artefacts []ArtefactDTO, ) *ImagedObjectDTO {
	this := ImagedObjectDTO{}
	this.Id = id
	this.Recto = recto
	this.Verso = verso
	this.Artefacts = artefacts
	return &this
}

// NewImagedObjectDTOWithDefaults instantiates a new ImagedObjectDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImagedObjectDTOWithDefaults() *ImagedObjectDTO {
	this := ImagedObjectDTO{}
	return &this
}

// GetId returns the Id field value
func (o *ImagedObjectDTO) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ImagedObjectDTO) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ImagedObjectDTO) SetId(v string) {
	o.Id = v
}

// GetRecto returns the Recto field value
func (o *ImagedObjectDTO) GetRecto() ImageStackDTO {
	if o == nil  {
		var ret ImageStackDTO
		return ret
	}

	return o.Recto
}

// GetRectoOk returns a tuple with the Recto field value
// and a boolean to check if the value has been set.
func (o *ImagedObjectDTO) GetRectoOk() (*ImageStackDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Recto, true
}

// SetRecto sets field value
func (o *ImagedObjectDTO) SetRecto(v ImageStackDTO) {
	o.Recto = v
}

// GetVerso returns the Verso field value
func (o *ImagedObjectDTO) GetVerso() ImageStackDTO {
	if o == nil  {
		var ret ImageStackDTO
		return ret
	}

	return o.Verso
}

// GetVersoOk returns a tuple with the Verso field value
// and a boolean to check if the value has been set.
func (o *ImagedObjectDTO) GetVersoOk() (*ImageStackDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Verso, true
}

// SetVerso sets field value
func (o *ImagedObjectDTO) SetVerso(v ImageStackDTO) {
	o.Verso = v
}

// GetArtefacts returns the Artefacts field value
func (o *ImagedObjectDTO) GetArtefacts() []ArtefactDTO {
	if o == nil  {
		var ret []ArtefactDTO
		return ret
	}

	return o.Artefacts
}

// GetArtefactsOk returns a tuple with the Artefacts field value
// and a boolean to check if the value has been set.
func (o *ImagedObjectDTO) GetArtefactsOk() (*[]ArtefactDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Artefacts, true
}

// SetArtefacts sets field value
func (o *ImagedObjectDTO) SetArtefacts(v []ArtefactDTO) {
	o.Artefacts = v
}

func (o ImagedObjectDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["recto"] = o.Recto
	}
	if true {
		toSerialize["verso"] = o.Verso
	}
	if true {
		toSerialize["artefacts"] = o.Artefacts
	}
	return json.Marshal(toSerialize)
}

type NullableImagedObjectDTO struct {
	value *ImagedObjectDTO
	isSet bool
}

func (v NullableImagedObjectDTO) Get() *ImagedObjectDTO {
	return v.value
}

func (v *NullableImagedObjectDTO) Set(val *ImagedObjectDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableImagedObjectDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableImagedObjectDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImagedObjectDTO(val *ImagedObjectDTO) *NullableImagedObjectDTO {
	return &NullableImagedObjectDTO{value: val, isSet: true}
}

func (v NullableImagedObjectDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImagedObjectDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


