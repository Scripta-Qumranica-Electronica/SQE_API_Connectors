/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// RoiApiService RoiApi service
type RoiApiService service

type ApiV1EditionsEditionIdRoisBatchEditPostRequest struct {
	ctx _context.Context
	ApiService *RoiApiService
	editionId int32
	batchEditRoiDTO *BatchEditRoiDTO
}

func (r ApiV1EditionsEditionIdRoisBatchEditPostRequest) BatchEditRoiDTO(batchEditRoiDTO BatchEditRoiDTO) ApiV1EditionsEditionIdRoisBatchEditPostRequest {
	r.batchEditRoiDTO = &batchEditRoiDTO
	return r
}

func (r ApiV1EditionsEditionIdRoisBatchEditPostRequest) Execute() (BatchEditRoiResponseDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdRoisBatchEditPostExecute(r)
}

/*
 * V1EditionsEditionIdRoisBatchEditPost Processes a series of create/update/delete ROI requests in the given edition of a scroll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @return ApiV1EditionsEditionIdRoisBatchEditPostRequest
 */
func (a *RoiApiService) V1EditionsEditionIdRoisBatchEditPost(ctx _context.Context, editionId int32) ApiV1EditionsEditionIdRoisBatchEditPostRequest {
	return ApiV1EditionsEditionIdRoisBatchEditPostRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
	}
}

/*
 * Execute executes the request
 * @return BatchEditRoiResponseDTO
 */
func (a *RoiApiService) V1EditionsEditionIdRoisBatchEditPostExecute(r ApiV1EditionsEditionIdRoisBatchEditPostRequest) (BatchEditRoiResponseDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BatchEditRoiResponseDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoiApiService.V1EditionsEditionIdRoisBatchEditPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/rois/batch-edit"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchEditRoiDTO
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdRoisBatchPostRequest struct {
	ctx _context.Context
	ApiService *RoiApiService
	editionId int32
	setInterpretationRoiDTOList *SetInterpretationRoiDTOList
}

func (r ApiV1EditionsEditionIdRoisBatchPostRequest) SetInterpretationRoiDTOList(setInterpretationRoiDTOList SetInterpretationRoiDTOList) ApiV1EditionsEditionIdRoisBatchPostRequest {
	r.setInterpretationRoiDTOList = &setInterpretationRoiDTOList
	return r
}

func (r ApiV1EditionsEditionIdRoisBatchPostRequest) Execute() (InterpretationRoiDTOList, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdRoisBatchPostExecute(r)
}

/*
 * V1EditionsEditionIdRoisBatchPost Creates new sign ROI's in the given edition of a scroll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @return ApiV1EditionsEditionIdRoisBatchPostRequest
 */
func (a *RoiApiService) V1EditionsEditionIdRoisBatchPost(ctx _context.Context, editionId int32) ApiV1EditionsEditionIdRoisBatchPostRequest {
	return ApiV1EditionsEditionIdRoisBatchPostRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
	}
}

/*
 * Execute executes the request
 * @return InterpretationRoiDTOList
 */
func (a *RoiApiService) V1EditionsEditionIdRoisBatchPostExecute(r ApiV1EditionsEditionIdRoisBatchPostRequest) (InterpretationRoiDTOList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InterpretationRoiDTOList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoiApiService.V1EditionsEditionIdRoisBatchPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/rois/batch"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setInterpretationRoiDTOList
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdRoisBatchPutRequest struct {
	ctx _context.Context
	ApiService *RoiApiService
	editionId int32
	updateInterpretationRoiDTOList *UpdateInterpretationRoiDTOList
}

func (r ApiV1EditionsEditionIdRoisBatchPutRequest) UpdateInterpretationRoiDTOList(updateInterpretationRoiDTOList UpdateInterpretationRoiDTOList) ApiV1EditionsEditionIdRoisBatchPutRequest {
	r.updateInterpretationRoiDTOList = &updateInterpretationRoiDTOList
	return r
}

func (r ApiV1EditionsEditionIdRoisBatchPutRequest) Execute() (UpdatedInterpretationRoiDTOList, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdRoisBatchPutExecute(r)
}

/*
 * V1EditionsEditionIdRoisBatchPut Update existing sign ROI's in the given edition of a scroll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @return ApiV1EditionsEditionIdRoisBatchPutRequest
 */
func (a *RoiApiService) V1EditionsEditionIdRoisBatchPut(ctx _context.Context, editionId int32) ApiV1EditionsEditionIdRoisBatchPutRequest {
	return ApiV1EditionsEditionIdRoisBatchPutRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
	}
}

/*
 * Execute executes the request
 * @return UpdatedInterpretationRoiDTOList
 */
func (a *RoiApiService) V1EditionsEditionIdRoisBatchPutExecute(r ApiV1EditionsEditionIdRoisBatchPutRequest) (UpdatedInterpretationRoiDTOList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpdatedInterpretationRoiDTOList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoiApiService.V1EditionsEditionIdRoisBatchPut")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/rois/batch"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateInterpretationRoiDTOList
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdRoisPostRequest struct {
	ctx _context.Context
	ApiService *RoiApiService
	editionId int32
	setInterpretationRoiDTO *SetInterpretationRoiDTO
}

func (r ApiV1EditionsEditionIdRoisPostRequest) SetInterpretationRoiDTO(setInterpretationRoiDTO SetInterpretationRoiDTO) ApiV1EditionsEditionIdRoisPostRequest {
	r.setInterpretationRoiDTO = &setInterpretationRoiDTO
	return r
}

func (r ApiV1EditionsEditionIdRoisPostRequest) Execute() (InterpretationRoiDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdRoisPostExecute(r)
}

/*
 * V1EditionsEditionIdRoisPost Creates new sign ROI in the given edition of a scroll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @return ApiV1EditionsEditionIdRoisPostRequest
 */
func (a *RoiApiService) V1EditionsEditionIdRoisPost(ctx _context.Context, editionId int32) ApiV1EditionsEditionIdRoisPostRequest {
	return ApiV1EditionsEditionIdRoisPostRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
	}
}

/*
 * Execute executes the request
 * @return InterpretationRoiDTO
 */
func (a *RoiApiService) V1EditionsEditionIdRoisPostExecute(r ApiV1EditionsEditionIdRoisPostRequest) (InterpretationRoiDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InterpretationRoiDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoiApiService.V1EditionsEditionIdRoisPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/rois"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setInterpretationRoiDTO
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdRoisRoiIdDeleteRequest struct {
	ctx _context.Context
	ApiService *RoiApiService
	editionId int32
	roiId int32
}


func (r ApiV1EditionsEditionIdRoisRoiIdDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdRoisRoiIdDeleteExecute(r)
}

/*
 * V1EditionsEditionIdRoisRoiIdDelete Deletes a sign ROI from the given edition of a scroll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @param roiId Id of the ROI to be deleted
 * @return ApiV1EditionsEditionIdRoisRoiIdDeleteRequest
 */
func (a *RoiApiService) V1EditionsEditionIdRoisRoiIdDelete(ctx _context.Context, editionId int32, roiId int32) ApiV1EditionsEditionIdRoisRoiIdDeleteRequest {
	return ApiV1EditionsEditionIdRoisRoiIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
		roiId: roiId,
	}
}

/*
 * Execute executes the request
 */
func (a *RoiApiService) V1EditionsEditionIdRoisRoiIdDeleteExecute(r ApiV1EditionsEditionIdRoisRoiIdDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoiApiService.V1EditionsEditionIdRoisRoiIdDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/rois/{roiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roiId"+"}", _neturl.PathEscape(parameterToString(r.roiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdRoisRoiIdGetRequest struct {
	ctx _context.Context
	ApiService *RoiApiService
	editionId int32
	roiId int32
}


func (r ApiV1EditionsEditionIdRoisRoiIdGetRequest) Execute() (InterpretationRoiDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdRoisRoiIdGetExecute(r)
}

/*
 * V1EditionsEditionIdRoisRoiIdGet Get the details for a ROI in the given edition of a scroll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @param roiId A JSON object with the new ROI to be created
 * @return ApiV1EditionsEditionIdRoisRoiIdGetRequest
 */
func (a *RoiApiService) V1EditionsEditionIdRoisRoiIdGet(ctx _context.Context, editionId int32, roiId int32) ApiV1EditionsEditionIdRoisRoiIdGetRequest {
	return ApiV1EditionsEditionIdRoisRoiIdGetRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
		roiId: roiId,
	}
}

/*
 * Execute executes the request
 * @return InterpretationRoiDTO
 */
func (a *RoiApiService) V1EditionsEditionIdRoisRoiIdGetExecute(r ApiV1EditionsEditionIdRoisRoiIdGetRequest) (InterpretationRoiDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InterpretationRoiDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoiApiService.V1EditionsEditionIdRoisRoiIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/rois/{roiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roiId"+"}", _neturl.PathEscape(parameterToString(r.roiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EditionsEditionIdRoisRoiIdPutRequest struct {
	ctx _context.Context
	ApiService *RoiApiService
	editionId int32
	roiId int32
	setInterpretationRoiDTO *SetInterpretationRoiDTO
}

func (r ApiV1EditionsEditionIdRoisRoiIdPutRequest) SetInterpretationRoiDTO(setInterpretationRoiDTO SetInterpretationRoiDTO) ApiV1EditionsEditionIdRoisRoiIdPutRequest {
	r.setInterpretationRoiDTO = &setInterpretationRoiDTO
	return r
}

func (r ApiV1EditionsEditionIdRoisRoiIdPutRequest) Execute() (UpdatedInterpretationRoiDTO, *_nethttp.Response, error) {
	return r.ApiService.V1EditionsEditionIdRoisRoiIdPutExecute(r)
}

/*
 * V1EditionsEditionIdRoisRoiIdPut Update an existing sign ROI in the given edition of a scroll
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param editionId Id of the edition
 * @param roiId Id of the ROI to be updated
 * @return ApiV1EditionsEditionIdRoisRoiIdPutRequest
 */
func (a *RoiApiService) V1EditionsEditionIdRoisRoiIdPut(ctx _context.Context, editionId int32, roiId int32) ApiV1EditionsEditionIdRoisRoiIdPutRequest {
	return ApiV1EditionsEditionIdRoisRoiIdPutRequest{
		ApiService: a,
		ctx: ctx,
		editionId: editionId,
		roiId: roiId,
	}
}

/*
 * Execute executes the request
 * @return UpdatedInterpretationRoiDTO
 */
func (a *RoiApiService) V1EditionsEditionIdRoisRoiIdPutExecute(r ApiV1EditionsEditionIdRoisRoiIdPutRequest) (UpdatedInterpretationRoiDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpdatedInterpretationRoiDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoiApiService.V1EditionsEditionIdRoisRoiIdPut")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/editions/{editionId}/rois/{roiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"editionId"+"}", _neturl.PathEscape(parameterToString(r.editionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roiId"+"}", _neturl.PathEscape(parameterToString(r.roiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setInterpretationRoiDTO
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
