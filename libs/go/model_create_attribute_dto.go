/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateAttributeDTO struct for CreateAttributeDTO
type CreateAttributeDTO struct {
	AttributeName string `json:"attributeName"`
	Values []CreateAttributeValueDTO `json:"values"`
	Description NullableString `json:"description,omitempty"`
	Editable *bool `json:"editable,omitempty"`
	Removable *bool `json:"removable,omitempty"`
	Repeatable *bool `json:"repeatable,omitempty"`
	BatchEditable *bool `json:"batchEditable,omitempty"`
}

// NewCreateAttributeDTO instantiates a new CreateAttributeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAttributeDTO(attributeName string, values []CreateAttributeValueDTO, ) *CreateAttributeDTO {
	this := CreateAttributeDTO{}
	this.AttributeName = attributeName
	this.Values = values
	return &this
}

// NewCreateAttributeDTOWithDefaults instantiates a new CreateAttributeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAttributeDTOWithDefaults() *CreateAttributeDTO {
	this := CreateAttributeDTO{}
	return &this
}

// GetAttributeName returns the AttributeName field value
func (o *CreateAttributeDTO) GetAttributeName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.AttributeName
}

// GetAttributeNameOk returns a tuple with the AttributeName field value
// and a boolean to check if the value has been set.
func (o *CreateAttributeDTO) GetAttributeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AttributeName, true
}

// SetAttributeName sets field value
func (o *CreateAttributeDTO) SetAttributeName(v string) {
	o.AttributeName = v
}

// GetValues returns the Values field value
func (o *CreateAttributeDTO) GetValues() []CreateAttributeValueDTO {
	if o == nil  {
		var ret []CreateAttributeValueDTO
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *CreateAttributeDTO) GetValuesOk() (*[]CreateAttributeValueDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Values, true
}

// SetValues sets field value
func (o *CreateAttributeDTO) SetValues(v []CreateAttributeValueDTO) {
	o.Values = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAttributeDTO) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAttributeDTO) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateAttributeDTO) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateAttributeDTO) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateAttributeDTO) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateAttributeDTO) UnsetDescription() {
	o.Description.Unset()
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *CreateAttributeDTO) GetEditable() bool {
	if o == nil || o.Editable == nil {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAttributeDTO) GetEditableOk() (*bool, bool) {
	if o == nil || o.Editable == nil {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *CreateAttributeDTO) HasEditable() bool {
	if o != nil && o.Editable != nil {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *CreateAttributeDTO) SetEditable(v bool) {
	o.Editable = &v
}

// GetRemovable returns the Removable field value if set, zero value otherwise.
func (o *CreateAttributeDTO) GetRemovable() bool {
	if o == nil || o.Removable == nil {
		var ret bool
		return ret
	}
	return *o.Removable
}

// GetRemovableOk returns a tuple with the Removable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAttributeDTO) GetRemovableOk() (*bool, bool) {
	if o == nil || o.Removable == nil {
		return nil, false
	}
	return o.Removable, true
}

// HasRemovable returns a boolean if a field has been set.
func (o *CreateAttributeDTO) HasRemovable() bool {
	if o != nil && o.Removable != nil {
		return true
	}

	return false
}

// SetRemovable gets a reference to the given bool and assigns it to the Removable field.
func (o *CreateAttributeDTO) SetRemovable(v bool) {
	o.Removable = &v
}

// GetRepeatable returns the Repeatable field value if set, zero value otherwise.
func (o *CreateAttributeDTO) GetRepeatable() bool {
	if o == nil || o.Repeatable == nil {
		var ret bool
		return ret
	}
	return *o.Repeatable
}

// GetRepeatableOk returns a tuple with the Repeatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAttributeDTO) GetRepeatableOk() (*bool, bool) {
	if o == nil || o.Repeatable == nil {
		return nil, false
	}
	return o.Repeatable, true
}

// HasRepeatable returns a boolean if a field has been set.
func (o *CreateAttributeDTO) HasRepeatable() bool {
	if o != nil && o.Repeatable != nil {
		return true
	}

	return false
}

// SetRepeatable gets a reference to the given bool and assigns it to the Repeatable field.
func (o *CreateAttributeDTO) SetRepeatable(v bool) {
	o.Repeatable = &v
}

// GetBatchEditable returns the BatchEditable field value if set, zero value otherwise.
func (o *CreateAttributeDTO) GetBatchEditable() bool {
	if o == nil || o.BatchEditable == nil {
		var ret bool
		return ret
	}
	return *o.BatchEditable
}

// GetBatchEditableOk returns a tuple with the BatchEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAttributeDTO) GetBatchEditableOk() (*bool, bool) {
	if o == nil || o.BatchEditable == nil {
		return nil, false
	}
	return o.BatchEditable, true
}

// HasBatchEditable returns a boolean if a field has been set.
func (o *CreateAttributeDTO) HasBatchEditable() bool {
	if o != nil && o.BatchEditable != nil {
		return true
	}

	return false
}

// SetBatchEditable gets a reference to the given bool and assigns it to the BatchEditable field.
func (o *CreateAttributeDTO) SetBatchEditable(v bool) {
	o.BatchEditable = &v
}

func (o CreateAttributeDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attributeName"] = o.AttributeName
	}
	if true {
		toSerialize["values"] = o.Values
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Editable != nil {
		toSerialize["editable"] = o.Editable
	}
	if o.Removable != nil {
		toSerialize["removable"] = o.Removable
	}
	if o.Repeatable != nil {
		toSerialize["repeatable"] = o.Repeatable
	}
	if o.BatchEditable != nil {
		toSerialize["batchEditable"] = o.BatchEditable
	}
	return json.Marshal(toSerialize)
}

type NullableCreateAttributeDTO struct {
	value *CreateAttributeDTO
	isSet bool
}

func (v NullableCreateAttributeDTO) Get() *CreateAttributeDTO {
	return v.value
}

func (v *NullableCreateAttributeDTO) Set(val *CreateAttributeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAttributeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAttributeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAttributeDTO(val *CreateAttributeDTO) *NullableCreateAttributeDTO {
	return &NullableCreateAttributeDTO{value: val, isSet: true}
}

func (v NullableCreateAttributeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAttributeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


