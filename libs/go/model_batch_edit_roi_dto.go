/*
 * SQE API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BatchEditRoiDTO struct for BatchEditRoiDTO
type BatchEditRoiDTO struct {
	CreateRois []SetInterpretationRoiDTO `json:"createRois,omitempty"`
	UpdateRois []UpdateInterpretationRoiDTO `json:"updateRois,omitempty"`
	DeleteRois []int32 `json:"deleteRois,omitempty"`
}

// NewBatchEditRoiDTO instantiates a new BatchEditRoiDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchEditRoiDTO() *BatchEditRoiDTO {
	this := BatchEditRoiDTO{}
	return &this
}

// NewBatchEditRoiDTOWithDefaults instantiates a new BatchEditRoiDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchEditRoiDTOWithDefaults() *BatchEditRoiDTO {
	this := BatchEditRoiDTO{}
	return &this
}

// GetCreateRois returns the CreateRois field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchEditRoiDTO) GetCreateRois() []SetInterpretationRoiDTO {
	if o == nil  {
		var ret []SetInterpretationRoiDTO
		return ret
	}
	return o.CreateRois
}

// GetCreateRoisOk returns a tuple with the CreateRois field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchEditRoiDTO) GetCreateRoisOk() (*[]SetInterpretationRoiDTO, bool) {
	if o == nil || o.CreateRois == nil {
		return nil, false
	}
	return &o.CreateRois, true
}

// HasCreateRois returns a boolean if a field has been set.
func (o *BatchEditRoiDTO) HasCreateRois() bool {
	if o != nil && o.CreateRois != nil {
		return true
	}

	return false
}

// SetCreateRois gets a reference to the given []SetInterpretationRoiDTO and assigns it to the CreateRois field.
func (o *BatchEditRoiDTO) SetCreateRois(v []SetInterpretationRoiDTO) {
	o.CreateRois = v
}

// GetUpdateRois returns the UpdateRois field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchEditRoiDTO) GetUpdateRois() []UpdateInterpretationRoiDTO {
	if o == nil  {
		var ret []UpdateInterpretationRoiDTO
		return ret
	}
	return o.UpdateRois
}

// GetUpdateRoisOk returns a tuple with the UpdateRois field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchEditRoiDTO) GetUpdateRoisOk() (*[]UpdateInterpretationRoiDTO, bool) {
	if o == nil || o.UpdateRois == nil {
		return nil, false
	}
	return &o.UpdateRois, true
}

// HasUpdateRois returns a boolean if a field has been set.
func (o *BatchEditRoiDTO) HasUpdateRois() bool {
	if o != nil && o.UpdateRois != nil {
		return true
	}

	return false
}

// SetUpdateRois gets a reference to the given []UpdateInterpretationRoiDTO and assigns it to the UpdateRois field.
func (o *BatchEditRoiDTO) SetUpdateRois(v []UpdateInterpretationRoiDTO) {
	o.UpdateRois = v
}

// GetDeleteRois returns the DeleteRois field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchEditRoiDTO) GetDeleteRois() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}
	return o.DeleteRois
}

// GetDeleteRoisOk returns a tuple with the DeleteRois field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchEditRoiDTO) GetDeleteRoisOk() (*[]int32, bool) {
	if o == nil || o.DeleteRois == nil {
		return nil, false
	}
	return &o.DeleteRois, true
}

// HasDeleteRois returns a boolean if a field has been set.
func (o *BatchEditRoiDTO) HasDeleteRois() bool {
	if o != nil && o.DeleteRois != nil {
		return true
	}

	return false
}

// SetDeleteRois gets a reference to the given []int32 and assigns it to the DeleteRois field.
func (o *BatchEditRoiDTO) SetDeleteRois(v []int32) {
	o.DeleteRois = v
}

func (o BatchEditRoiDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreateRois != nil {
		toSerialize["createRois"] = o.CreateRois
	}
	if o.UpdateRois != nil {
		toSerialize["updateRois"] = o.UpdateRois
	}
	if o.DeleteRois != nil {
		toSerialize["deleteRois"] = o.DeleteRois
	}
	return json.Marshal(toSerialize)
}

type NullableBatchEditRoiDTO struct {
	value *BatchEditRoiDTO
	isSet bool
}

func (v NullableBatchEditRoiDTO) Get() *BatchEditRoiDTO {
	return v.value
}

func (v *NullableBatchEditRoiDTO) Set(val *BatchEditRoiDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchEditRoiDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchEditRoiDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchEditRoiDTO(val *BatchEditRoiDTO) *NullableBatchEditRoiDTO {
	return &NullableBatchEditRoiDTO{value: val, isSet: true}
}

func (v NullableBatchEditRoiDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchEditRoiDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


