# coding: utf-8

"""
    SQE API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qumranica_api_connector.api_client import ApiClient
from qumranica_api_connector.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ImagedObjectApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_editions_edition_id_imaged_objects_get(self, edition_id, **kwargs):  # noqa: E501
        """Provides a listing of imaged objects related to the specified edition, can include images and also their masks with  optional.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_editions_edition_id_imaged_objects_get(edition_id, async_req=True)
        >>> result = thread.get()

        :param edition_id: Unique Id of the desired edition (required)
        :type edition_id: int
        :param optional: Set 'artefacts' to receive related artefact data and 'masks' to include the artefact masks
        :type optional: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ImagedObjectListDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_editions_edition_id_imaged_objects_get_with_http_info(edition_id, **kwargs)  # noqa: E501

    def v1_editions_edition_id_imaged_objects_get_with_http_info(self, edition_id, **kwargs):  # noqa: E501
        """Provides a listing of imaged objects related to the specified edition, can include images and also their masks with  optional.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_editions_edition_id_imaged_objects_get_with_http_info(edition_id, async_req=True)
        >>> result = thread.get()

        :param edition_id: Unique Id of the desired edition (required)
        :type edition_id: int
        :param optional: Set 'artefacts' to receive related artefact data and 'masks' to include the artefact masks
        :type optional: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ImagedObjectListDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'edition_id',
            'optional'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_editions_edition_id_imaged_objects_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'edition_id' is set
        if self.api_client.client_side_validation and ('edition_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['edition_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `edition_id` when calling `v1_editions_edition_id_imaged_objects_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edition_id' in local_var_params:
            path_params['editionId'] = local_var_params['edition_id']  # noqa: E501

        query_params = []
        if 'optional' in local_var_params and local_var_params['optional'] is not None:  # noqa: E501
            query_params.append(('optional', local_var_params['optional']))  # noqa: E501
            collection_formats['optional'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501
        
        response_types_map = {
            200: "ImagedObjectListDTO",
        }

        return self.api_client.call_api(
            '/v1/editions/{editionId}/imaged-objects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_editions_edition_id_imaged_objects_imaged_object_id_get(self, edition_id, imaged_object_id, **kwargs):  # noqa: E501
        """Provides information for the specified imaged object related to the specified edition, can include images and also  their masks with optional.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_editions_edition_id_imaged_objects_imaged_object_id_get(edition_id, imaged_object_id, async_req=True)
        >>> result = thread.get()

        :param edition_id: Unique Id of the desired edition (required)
        :type edition_id: int
        :param imaged_object_id: Unique Id of the desired object from the imaging Institution (required)
        :type imaged_object_id: str
        :param optional: Set 'artefacts' to receive related artefact data and 'masks' to include the artefact masks
        :type optional: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ImagedObjectDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_editions_edition_id_imaged_objects_imaged_object_id_get_with_http_info(edition_id, imaged_object_id, **kwargs)  # noqa: E501

    def v1_editions_edition_id_imaged_objects_imaged_object_id_get_with_http_info(self, edition_id, imaged_object_id, **kwargs):  # noqa: E501
        """Provides information for the specified imaged object related to the specified edition, can include images and also  their masks with optional.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_editions_edition_id_imaged_objects_imaged_object_id_get_with_http_info(edition_id, imaged_object_id, async_req=True)
        >>> result = thread.get()

        :param edition_id: Unique Id of the desired edition (required)
        :type edition_id: int
        :param imaged_object_id: Unique Id of the desired object from the imaging Institution (required)
        :type imaged_object_id: str
        :param optional: Set 'artefacts' to receive related artefact data and 'masks' to include the artefact masks
        :type optional: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ImagedObjectDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'edition_id',
            'imaged_object_id',
            'optional'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_editions_edition_id_imaged_objects_imaged_object_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'edition_id' is set
        if self.api_client.client_side_validation and ('edition_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['edition_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `edition_id` when calling `v1_editions_edition_id_imaged_objects_imaged_object_id_get`")  # noqa: E501
        # verify the required parameter 'imaged_object_id' is set
        if self.api_client.client_side_validation and ('imaged_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['imaged_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `imaged_object_id` when calling `v1_editions_edition_id_imaged_objects_imaged_object_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edition_id' in local_var_params:
            path_params['editionId'] = local_var_params['edition_id']  # noqa: E501
        if 'imaged_object_id' in local_var_params:
            path_params['imagedObjectId'] = local_var_params['imaged_object_id']  # noqa: E501

        query_params = []
        if 'optional' in local_var_params and local_var_params['optional'] is not None:  # noqa: E501
            query_params.append(('optional', local_var_params['optional']))  # noqa: E501
            collection_formats['optional'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501
        
        response_types_map = {
            200: "ImagedObjectDTO",
        }

        return self.api_client.call_api(
            '/v1/editions/{editionId}/imaged-objects/{imagedObjectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_imaged_objects_imaged_object_id_get(self, imaged_object_id, **kwargs):  # noqa: E501
        """Provides information for the specified imaged object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_imaged_objects_imaged_object_id_get(imaged_object_id, async_req=True)
        >>> result = thread.get()

        :param imaged_object_id: Unique Id of the desired object from the imaging Institution (required)
        :type imaged_object_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SimpleImageListDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_imaged_objects_imaged_object_id_get_with_http_info(imaged_object_id, **kwargs)  # noqa: E501

    def v1_imaged_objects_imaged_object_id_get_with_http_info(self, imaged_object_id, **kwargs):  # noqa: E501
        """Provides information for the specified imaged object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_imaged_objects_imaged_object_id_get_with_http_info(imaged_object_id, async_req=True)
        >>> result = thread.get()

        :param imaged_object_id: Unique Id of the desired object from the imaging Institution (required)
        :type imaged_object_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SimpleImageListDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'imaged_object_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_imaged_objects_imaged_object_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'imaged_object_id' is set
        if self.api_client.client_side_validation and ('imaged_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['imaged_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `imaged_object_id` when calling `v1_imaged_objects_imaged_object_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imaged_object_id' in local_var_params:
            path_params['imagedObjectId'] = local_var_params['imaged_object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501
        
        response_types_map = {
            200: "SimpleImageListDTO",
        }

        return self.api_client.call_api(
            '/v1/imaged-objects/{imagedObjectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_imaged_objects_imaged_object_id_text_fragments_get(self, imaged_object_id, **kwargs):  # noqa: E501
        """Provides a list of all text fragments that should correspond to the imaged object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_imaged_objects_imaged_object_id_text_fragments_get(imaged_object_id, async_req=True)
        >>> result = thread.get()

        :param imaged_object_id: Id of the imaged object (required)
        :type imaged_object_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ImagedObjectTextFragmentMatchListDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_imaged_objects_imaged_object_id_text_fragments_get_with_http_info(imaged_object_id, **kwargs)  # noqa: E501

    def v1_imaged_objects_imaged_object_id_text_fragments_get_with_http_info(self, imaged_object_id, **kwargs):  # noqa: E501
        """Provides a list of all text fragments that should correspond to the imaged object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_imaged_objects_imaged_object_id_text_fragments_get_with_http_info(imaged_object_id, async_req=True)
        >>> result = thread.get()

        :param imaged_object_id: Id of the imaged object (required)
        :type imaged_object_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ImagedObjectTextFragmentMatchListDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'imaged_object_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_imaged_objects_imaged_object_id_text_fragments_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'imaged_object_id' is set
        if self.api_client.client_side_validation and ('imaged_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['imaged_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `imaged_object_id` when calling `v1_imaged_objects_imaged_object_id_text_fragments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imaged_object_id' in local_var_params:
            path_params['imagedObjectId'] = local_var_params['imaged_object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501
        
        response_types_map = {
            200: "ImagedObjectTextFragmentMatchListDTO",
        }

        return self.api_client.call_api(
            '/v1/imaged-objects/{imagedObjectId}/text-fragments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_imaged_objects_institutions_get(self, **kwargs):  # noqa: E501
        """Provides a list of all institutional image providers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_imaged_objects_institutions_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ImageInstitutionListDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_imaged_objects_institutions_get_with_http_info(**kwargs)  # noqa: E501

    def v1_imaged_objects_institutions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Provides a list of all institutional image providers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_imaged_objects_institutions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ImageInstitutionListDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_imaged_objects_institutions_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501
        
        response_types_map = {
            200: "ImageInstitutionListDTO",
        }

        return self.api_client.call_api(
            '/v1/imaged-objects/institutions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_imaged_objects_institutions_institution_name_get(self, institution_name, **kwargs):  # noqa: E501
        """Provides a list of all institutional image providers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_imaged_objects_institutions_institution_name_get(institution_name, async_req=True)
        >>> result = thread.get()

        :param institution_name: (required)
        :type institution_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InstitutionalImageListDTO
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_imaged_objects_institutions_institution_name_get_with_http_info(institution_name, **kwargs)  # noqa: E501

    def v1_imaged_objects_institutions_institution_name_get_with_http_info(self, institution_name, **kwargs):  # noqa: E501
        """Provides a list of all institutional image providers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_imaged_objects_institutions_institution_name_get_with_http_info(institution_name, async_req=True)
        >>> result = thread.get()

        :param institution_name: (required)
        :type institution_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InstitutionalImageListDTO, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'institution_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_imaged_objects_institutions_institution_name_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'institution_name' is set
        if self.api_client.client_side_validation and ('institution_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['institution_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `institution_name` when calling `v1_imaged_objects_institutions_institution_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'institution_name' in local_var_params:
            path_params['institutionName'] = local_var_params['institution_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501
        
        response_types_map = {
            200: "InstitutionalImageListDTO",
        }

        return self.api_client.call_api(
            '/v1/imaged-objects/institutions/{institutionName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
