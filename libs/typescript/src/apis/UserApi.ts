/* tslint:disable */
/* eslint-disable */
/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountActivationRequestDTO,
    AccountActivationRequestDTOFromJSON,
    AccountActivationRequestDTOToJSON,
    DetailedUserDTO,
    DetailedUserDTOFromJSON,
    DetailedUserDTOToJSON,
    DetailedUserTokenDTO,
    DetailedUserTokenDTOFromJSON,
    DetailedUserTokenDTOToJSON,
    LoginRequestDTO,
    LoginRequestDTOFromJSON,
    LoginRequestDTOToJSON,
    NewUserRequestDTO,
    NewUserRequestDTOFromJSON,
    NewUserRequestDTOToJSON,
    ResendUserAccountActivationRequestDTO,
    ResendUserAccountActivationRequestDTOFromJSON,
    ResendUserAccountActivationRequestDTOToJSON,
    ResetForgottenUserPasswordRequestDTO,
    ResetForgottenUserPasswordRequestDTOFromJSON,
    ResetForgottenUserPasswordRequestDTOToJSON,
    ResetLoggedInUserPasswordRequestDTO,
    ResetLoggedInUserPasswordRequestDTOFromJSON,
    ResetLoggedInUserPasswordRequestDTOToJSON,
    ResetUserPasswordRequestDTO,
    ResetUserPasswordRequestDTOFromJSON,
    ResetUserPasswordRequestDTOToJSON,
    UnactivatedEmailUpdateRequestDTO,
    UnactivatedEmailUpdateRequestDTOFromJSON,
    UnactivatedEmailUpdateRequestDTOToJSON,
    UserDTO,
    UserDTOFromJSON,
    UserDTOToJSON,
    UserUpdateRequestDTO,
    UserUpdateRequestDTOFromJSON,
    UserUpdateRequestDTOToJSON,
} from '../models';

export interface V1UsersChangeForgottenPasswordPostRequest {
    resetForgottenUserPasswordRequestDTO?: ResetForgottenUserPasswordRequestDTO;
}

export interface V1UsersChangePasswordPostRequest {
    resetLoggedInUserPasswordRequestDTO?: ResetLoggedInUserPasswordRequestDTO;
}

export interface V1UsersChangeUnactivatedEmailPostRequest {
    unactivatedEmailUpdateRequestDTO?: UnactivatedEmailUpdateRequestDTO;
}

export interface V1UsersConfirmRegistrationPostRequest {
    accountActivationRequestDTO?: AccountActivationRequestDTO;
}

export interface V1UsersForgotPasswordPostRequest {
    resetUserPasswordRequestDTO?: ResetUserPasswordRequestDTO;
}

export interface V1UsersLoginPostRequest {
    loginRequestDTO?: LoginRequestDTO;
}

export interface V1UsersPostRequest {
    newUserRequestDTO?: NewUserRequestDTO;
}

export interface V1UsersPutRequest {
    userUpdateRequestDTO?: UserUpdateRequestDTO;
}

export interface V1UsersResendActivationEmailPostRequest {
    resendUserAccountActivationRequestDTO?: ResendUserAccountActivationRequestDTO;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Uses the secret token from /users/forgot-password to validate a reset of the user\'s password
     */
    async v1UsersChangeForgottenPasswordPostRaw(requestParameters: V1UsersChangeForgottenPasswordPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/users/change-forgotten-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetForgottenUserPasswordRequestDTOToJSON(requestParameters.resetForgottenUserPasswordRequestDTO),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uses the secret token from /users/forgot-password to validate a reset of the user\'s password
     */
    async v1UsersChangeForgottenPasswordPost(requestParameters: V1UsersChangeForgottenPasswordPostRequest): Promise<void> {
        await this.v1UsersChangeForgottenPasswordPostRaw(requestParameters);
    }

    /**
     * Changes the password for the currently logged in user
     */
    async v1UsersChangePasswordPostRaw(requestParameters: V1UsersChangePasswordPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/users/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetLoggedInUserPasswordRequestDTOToJSON(requestParameters.resetLoggedInUserPasswordRequestDTO),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Changes the password for the currently logged in user
     */
    async v1UsersChangePasswordPost(requestParameters: V1UsersChangePasswordPostRequest): Promise<void> {
        await this.v1UsersChangePasswordPostRaw(requestParameters);
    }

    /**
     * Allows a user who has not yet activated their account to change their email address. This will not work if the user  account associated with the email address has already been activated
     */
    async v1UsersChangeUnactivatedEmailPostRaw(requestParameters: V1UsersChangeUnactivatedEmailPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/users/change-unactivated-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnactivatedEmailUpdateRequestDTOToJSON(requestParameters.unactivatedEmailUpdateRequestDTO),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows a user who has not yet activated their account to change their email address. This will not work if the user  account associated with the email address has already been activated
     */
    async v1UsersChangeUnactivatedEmailPost(requestParameters: V1UsersChangeUnactivatedEmailPostRequest): Promise<void> {
        await this.v1UsersChangeUnactivatedEmailPostRaw(requestParameters);
    }

    /**
     * Confirms registration of new user account.
     */
    async v1UsersConfirmRegistrationPostRaw(requestParameters: V1UsersConfirmRegistrationPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/users/confirm-registration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountActivationRequestDTOToJSON(requestParameters.accountActivationRequestDTO),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Confirms registration of new user account.
     */
    async v1UsersConfirmRegistrationPost(requestParameters: V1UsersConfirmRegistrationPostRequest): Promise<void> {
        await this.v1UsersConfirmRegistrationPostRaw(requestParameters);
    }

    /**
     * Sends a secret token to the user\'s email to allow password reset.
     */
    async v1UsersForgotPasswordPostRaw(requestParameters: V1UsersForgotPasswordPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/users/forgot-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetUserPasswordRequestDTOToJSON(requestParameters.resetUserPasswordRequestDTO),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sends a secret token to the user\'s email to allow password reset.
     */
    async v1UsersForgotPasswordPost(requestParameters: V1UsersForgotPasswordPostRequest): Promise<void> {
        await this.v1UsersForgotPasswordPostRaw(requestParameters);
    }

    /**
     * Provides the user details for a user with valid JWT in the Authorize header
     */
    async v1UsersGetRaw(): Promise<runtime.ApiResponse<UserDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOFromJSON(jsonValue));
    }

    /**
     * Provides the user details for a user with valid JWT in the Authorize header
     */
    async v1UsersGet(): Promise<UserDTO> {
        const response = await this.v1UsersGetRaw();
        return await response.value();
    }

    /**
     * Provides a JWT bearer token for valid email and password
     */
    async v1UsersLoginPostRaw(requestParameters: V1UsersLoginPostRequest): Promise<runtime.ApiResponse<DetailedUserTokenDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestDTOToJSON(requestParameters.loginRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailedUserTokenDTOFromJSON(jsonValue));
    }

    /**
     * Provides a JWT bearer token for valid email and password
     */
    async v1UsersLoginPost(requestParameters: V1UsersLoginPostRequest): Promise<DetailedUserTokenDTO> {
        const response = await this.v1UsersLoginPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new user with the submitted data.
     */
    async v1UsersPostRaw(requestParameters: V1UsersPostRequest): Promise<runtime.ApiResponse<UserDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewUserRequestDTOToJSON(requestParameters.newUserRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new user with the submitted data.
     */
    async v1UsersPost(requestParameters: V1UsersPostRequest): Promise<UserDTO> {
        const response = await this.v1UsersPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a user\'s registration details.  Note that the if the email address has changed, the account will be set to  inactive until the account is activated with the secret token.
     */
    async v1UsersPutRaw(requestParameters: V1UsersPutRequest): Promise<runtime.ApiResponse<DetailedUserDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/users`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateRequestDTOToJSON(requestParameters.userUpdateRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailedUserDTOFromJSON(jsonValue));
    }

    /**
     * Updates a user\'s registration details.  Note that the if the email address has changed, the account will be set to  inactive until the account is activated with the secret token.
     */
    async v1UsersPut(requestParameters: V1UsersPutRequest): Promise<DetailedUserDTO> {
        const response = await this.v1UsersPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sends a new activation email for the user\'s account. This will not work if the user account associated with the  email address has already been activated.
     */
    async v1UsersResendActivationEmailPostRaw(requestParameters: V1UsersResendActivationEmailPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/users/resend-activation-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendUserAccountActivationRequestDTOToJSON(requestParameters.resendUserAccountActivationRequestDTO),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sends a new activation email for the user\'s account. This will not work if the user account associated with the  email address has already been activated.
     */
    async v1UsersResendActivationEmailPost(requestParameters: V1UsersResendActivationEmailPostRequest): Promise<void> {
        await this.v1UsersResendActivationEmailPostRaw(requestParameters);
    }

}
