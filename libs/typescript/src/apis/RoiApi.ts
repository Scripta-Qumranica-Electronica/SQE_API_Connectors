/* tslint:disable */
/* eslint-disable */
/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BatchEditRoiDTO,
    BatchEditRoiDTOFromJSON,
    BatchEditRoiDTOToJSON,
    BatchEditRoiResponseDTO,
    BatchEditRoiResponseDTOFromJSON,
    BatchEditRoiResponseDTOToJSON,
    InterpretationRoiDTO,
    InterpretationRoiDTOFromJSON,
    InterpretationRoiDTOToJSON,
    InterpretationRoiDTOList,
    InterpretationRoiDTOListFromJSON,
    InterpretationRoiDTOListToJSON,
    SetInterpretationRoiDTO,
    SetInterpretationRoiDTOFromJSON,
    SetInterpretationRoiDTOToJSON,
    SetInterpretationRoiDTOList,
    SetInterpretationRoiDTOListFromJSON,
    SetInterpretationRoiDTOListToJSON,
    UpdateInterpretationRoiDTOList,
    UpdateInterpretationRoiDTOListFromJSON,
    UpdateInterpretationRoiDTOListToJSON,
    UpdatedInterpretationRoiDTO,
    UpdatedInterpretationRoiDTOFromJSON,
    UpdatedInterpretationRoiDTOToJSON,
    UpdatedInterpretationRoiDTOList,
    UpdatedInterpretationRoiDTOListFromJSON,
    UpdatedInterpretationRoiDTOListToJSON,
} from '../models';

export interface V1EditionsEditionIdRoisBatchEditPostRequest {
    editionId: number;
    batchEditRoiDTO?: BatchEditRoiDTO;
}

export interface V1EditionsEditionIdRoisBatchPostRequest {
    editionId: number;
    setInterpretationRoiDTOList?: SetInterpretationRoiDTOList;
}

export interface V1EditionsEditionIdRoisBatchPutRequest {
    editionId: number;
    updateInterpretationRoiDTOList?: UpdateInterpretationRoiDTOList;
}

export interface V1EditionsEditionIdRoisPostRequest {
    editionId: number;
    setInterpretationRoiDTO?: SetInterpretationRoiDTO;
}

export interface V1EditionsEditionIdRoisRoiIdDeleteRequest {
    editionId: number;
    roiId: number;
}

export interface V1EditionsEditionIdRoisRoiIdGetRequest {
    editionId: number;
    roiId: number;
}

export interface V1EditionsEditionIdRoisRoiIdPutRequest {
    editionId: number;
    roiId: number;
    setInterpretationRoiDTO?: SetInterpretationRoiDTO;
}

/**
 * 
 */
export class RoiApi extends runtime.BaseAPI {

    /**
     * Processes a series of create/update/delete ROI requests in the given edition of a scroll
     */
    async v1EditionsEditionIdRoisBatchEditPostRaw(requestParameters: V1EditionsEditionIdRoisBatchEditPostRequest): Promise<runtime.ApiResponse<BatchEditRoiResponseDTO>> {
        if (requestParameters.editionId === null || requestParameters.editionId === undefined) {
            throw new runtime.RequiredError('editionId','Required parameter requestParameters.editionId was null or undefined when calling v1EditionsEditionIdRoisBatchEditPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/editions/{editionId}/rois/batch-edit`.replace(`{${"editionId"}}`, encodeURIComponent(String(requestParameters.editionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BatchEditRoiDTOToJSON(requestParameters.batchEditRoiDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BatchEditRoiResponseDTOFromJSON(jsonValue));
    }

    /**
     * Processes a series of create/update/delete ROI requests in the given edition of a scroll
     */
    async v1EditionsEditionIdRoisBatchEditPost(requestParameters: V1EditionsEditionIdRoisBatchEditPostRequest): Promise<BatchEditRoiResponseDTO> {
        const response = await this.v1EditionsEditionIdRoisBatchEditPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates new sign ROI\'s in the given edition of a scroll
     */
    async v1EditionsEditionIdRoisBatchPostRaw(requestParameters: V1EditionsEditionIdRoisBatchPostRequest): Promise<runtime.ApiResponse<InterpretationRoiDTOList>> {
        if (requestParameters.editionId === null || requestParameters.editionId === undefined) {
            throw new runtime.RequiredError('editionId','Required parameter requestParameters.editionId was null or undefined when calling v1EditionsEditionIdRoisBatchPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/editions/{editionId}/rois/batch`.replace(`{${"editionId"}}`, encodeURIComponent(String(requestParameters.editionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetInterpretationRoiDTOListToJSON(requestParameters.setInterpretationRoiDTOList),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InterpretationRoiDTOListFromJSON(jsonValue));
    }

    /**
     * Creates new sign ROI\'s in the given edition of a scroll
     */
    async v1EditionsEditionIdRoisBatchPost(requestParameters: V1EditionsEditionIdRoisBatchPostRequest): Promise<InterpretationRoiDTOList> {
        const response = await this.v1EditionsEditionIdRoisBatchPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update existing sign ROI\'s in the given edition of a scroll
     */
    async v1EditionsEditionIdRoisBatchPutRaw(requestParameters: V1EditionsEditionIdRoisBatchPutRequest): Promise<runtime.ApiResponse<UpdatedInterpretationRoiDTOList>> {
        if (requestParameters.editionId === null || requestParameters.editionId === undefined) {
            throw new runtime.RequiredError('editionId','Required parameter requestParameters.editionId was null or undefined when calling v1EditionsEditionIdRoisBatchPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/editions/{editionId}/rois/batch`.replace(`{${"editionId"}}`, encodeURIComponent(String(requestParameters.editionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateInterpretationRoiDTOListToJSON(requestParameters.updateInterpretationRoiDTOList),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatedInterpretationRoiDTOListFromJSON(jsonValue));
    }

    /**
     * Update existing sign ROI\'s in the given edition of a scroll
     */
    async v1EditionsEditionIdRoisBatchPut(requestParameters: V1EditionsEditionIdRoisBatchPutRequest): Promise<UpdatedInterpretationRoiDTOList> {
        const response = await this.v1EditionsEditionIdRoisBatchPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates new sign ROI in the given edition of a scroll
     */
    async v1EditionsEditionIdRoisPostRaw(requestParameters: V1EditionsEditionIdRoisPostRequest): Promise<runtime.ApiResponse<InterpretationRoiDTO>> {
        if (requestParameters.editionId === null || requestParameters.editionId === undefined) {
            throw new runtime.RequiredError('editionId','Required parameter requestParameters.editionId was null or undefined when calling v1EditionsEditionIdRoisPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/editions/{editionId}/rois`.replace(`{${"editionId"}}`, encodeURIComponent(String(requestParameters.editionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetInterpretationRoiDTOToJSON(requestParameters.setInterpretationRoiDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InterpretationRoiDTOFromJSON(jsonValue));
    }

    /**
     * Creates new sign ROI in the given edition of a scroll
     */
    async v1EditionsEditionIdRoisPost(requestParameters: V1EditionsEditionIdRoisPostRequest): Promise<InterpretationRoiDTO> {
        const response = await this.v1EditionsEditionIdRoisPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a sign ROI from the given edition of a scroll
     */
    async v1EditionsEditionIdRoisRoiIdDeleteRaw(requestParameters: V1EditionsEditionIdRoisRoiIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.editionId === null || requestParameters.editionId === undefined) {
            throw new runtime.RequiredError('editionId','Required parameter requestParameters.editionId was null or undefined when calling v1EditionsEditionIdRoisRoiIdDelete.');
        }

        if (requestParameters.roiId === null || requestParameters.roiId === undefined) {
            throw new runtime.RequiredError('roiId','Required parameter requestParameters.roiId was null or undefined when calling v1EditionsEditionIdRoisRoiIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/editions/{editionId}/rois/{roiId}`.replace(`{${"editionId"}}`, encodeURIComponent(String(requestParameters.editionId))).replace(`{${"roiId"}}`, encodeURIComponent(String(requestParameters.roiId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a sign ROI from the given edition of a scroll
     */
    async v1EditionsEditionIdRoisRoiIdDelete(requestParameters: V1EditionsEditionIdRoisRoiIdDeleteRequest): Promise<void> {
        await this.v1EditionsEditionIdRoisRoiIdDeleteRaw(requestParameters);
    }

    /**
     * Get the details for a ROI in the given edition of a scroll
     */
    async v1EditionsEditionIdRoisRoiIdGetRaw(requestParameters: V1EditionsEditionIdRoisRoiIdGetRequest): Promise<runtime.ApiResponse<InterpretationRoiDTO>> {
        if (requestParameters.editionId === null || requestParameters.editionId === undefined) {
            throw new runtime.RequiredError('editionId','Required parameter requestParameters.editionId was null or undefined when calling v1EditionsEditionIdRoisRoiIdGet.');
        }

        if (requestParameters.roiId === null || requestParameters.roiId === undefined) {
            throw new runtime.RequiredError('roiId','Required parameter requestParameters.roiId was null or undefined when calling v1EditionsEditionIdRoisRoiIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/editions/{editionId}/rois/{roiId}`.replace(`{${"editionId"}}`, encodeURIComponent(String(requestParameters.editionId))).replace(`{${"roiId"}}`, encodeURIComponent(String(requestParameters.roiId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InterpretationRoiDTOFromJSON(jsonValue));
    }

    /**
     * Get the details for a ROI in the given edition of a scroll
     */
    async v1EditionsEditionIdRoisRoiIdGet(requestParameters: V1EditionsEditionIdRoisRoiIdGetRequest): Promise<InterpretationRoiDTO> {
        const response = await this.v1EditionsEditionIdRoisRoiIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing sign ROI in the given edition of a scroll
     */
    async v1EditionsEditionIdRoisRoiIdPutRaw(requestParameters: V1EditionsEditionIdRoisRoiIdPutRequest): Promise<runtime.ApiResponse<UpdatedInterpretationRoiDTO>> {
        if (requestParameters.editionId === null || requestParameters.editionId === undefined) {
            throw new runtime.RequiredError('editionId','Required parameter requestParameters.editionId was null or undefined when calling v1EditionsEditionIdRoisRoiIdPut.');
        }

        if (requestParameters.roiId === null || requestParameters.roiId === undefined) {
            throw new runtime.RequiredError('roiId','Required parameter requestParameters.roiId was null or undefined when calling v1EditionsEditionIdRoisRoiIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/editions/{editionId}/rois/{roiId}`.replace(`{${"editionId"}}`, encodeURIComponent(String(requestParameters.editionId))).replace(`{${"roiId"}}`, encodeURIComponent(String(requestParameters.roiId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetInterpretationRoiDTOToJSON(requestParameters.setInterpretationRoiDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatedInterpretationRoiDTOFromJSON(jsonValue));
    }

    /**
     * Update an existing sign ROI in the given edition of a scroll
     */
    async v1EditionsEditionIdRoisRoiIdPut(requestParameters: V1EditionsEditionIdRoisRoiIdPutRequest): Promise<UpdatedInterpretationRoiDTO> {
        const response = await this.v1EditionsEditionIdRoisRoiIdPutRaw(requestParameters);
        return await response.value();
    }

}
