/* tslint:disable */
/* eslint-disable */
/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EditorDTO,
    EditorDTOFromJSON,
    EditorDTOFromJSONTyped,
    EditorDTOToJSON,
    SignDTO,
    SignDTOFromJSON,
    SignDTOFromJSONTyped,
    SignDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface LineTextDTO
 */
export interface LineTextDTO {
    /**
     * 
     * @type {string}
     * @memberof LineTextDTO
     */
    licence: string;
    /**
     * 
     * @type {{ [key: string]: EditorDTO; }}
     * @memberof LineTextDTO
     */
    editors: { [key: string]: EditorDTO; };
    /**
     * 
     * @type {number}
     * @memberof LineTextDTO
     */
    lineId: number;
    /**
     * 
     * @type {string}
     * @memberof LineTextDTO
     */
    lineName: string;
    /**
     * 
     * @type {number}
     * @memberof LineTextDTO
     */
    editorId: number;
    /**
     * 
     * @type {Array<SignDTO>}
     * @memberof LineTextDTO
     */
    signs: Array<SignDTO>;
}

export function LineTextDTOFromJSON(json: any): LineTextDTO {
    return LineTextDTOFromJSONTyped(json, false);
}

export function LineTextDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): LineTextDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'licence': json['licence'],
        'editors': (mapValues(json['editors'], EditorDTOFromJSON)),
        'lineId': json['lineId'],
        'lineName': json['lineName'],
        'editorId': json['editorId'],
        'signs': ((json['signs'] as Array<any>).map(SignDTOFromJSON)),
    };
}

export function LineTextDTOToJSON(value?: LineTextDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'licence': value.licence,
        'editors': (mapValues(value.editors, EditorDTOToJSON)),
        'lineId': value.lineId,
        'lineName': value.lineName,
        'editorId': value.editorId,
        'signs': ((value.signs as Array<any>).map(SignDTOToJSON)),
    };
}


