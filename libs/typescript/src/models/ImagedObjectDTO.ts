/* tslint:disable */
/* eslint-disable */
/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ArtefactDTO,
    ArtefactDTOFromJSON,
    ArtefactDTOFromJSONTyped,
    ArtefactDTOToJSON,
    ImageStackDTO,
    ImageStackDTOFromJSON,
    ImageStackDTOFromJSONTyped,
    ImageStackDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface ImagedObjectDTO
 */
export interface ImagedObjectDTO {
    /**
     * 
     * @type {string}
     * @memberof ImagedObjectDTO
     */
    id: string;
    /**
     * 
     * @type {ImageStackDTO}
     * @memberof ImagedObjectDTO
     */
    recto: ImageStackDTO;
    /**
     * 
     * @type {ImageStackDTO}
     * @memberof ImagedObjectDTO
     */
    verso: ImageStackDTO;
    /**
     * 
     * @type {Array<ArtefactDTO>}
     * @memberof ImagedObjectDTO
     */
    artefacts: Array<ArtefactDTO>;
}

export function ImagedObjectDTOFromJSON(json: any): ImagedObjectDTO {
    return ImagedObjectDTOFromJSONTyped(json, false);
}

export function ImagedObjectDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImagedObjectDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'recto': ImageStackDTOFromJSON(json['recto']),
        'verso': ImageStackDTOFromJSON(json['verso']),
        'artefacts': ((json['artefacts'] as Array<any>).map(ArtefactDTOFromJSON)),
    };
}

export function ImagedObjectDTOToJSON(value?: ImagedObjectDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'recto': ImageStackDTOToJSON(value.recto),
        'verso': ImageStackDTOToJSON(value.verso),
        'artefacts': ((value.artefacts as Array<any>).map(ArtefactDTOToJSON)),
    };
}


