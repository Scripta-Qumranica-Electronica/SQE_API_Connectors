/* tslint:disable */
/* eslint-disable */
/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AttributeValueDTO,
    AttributeValueDTOFromJSON,
    AttributeValueDTOFromJSONTyped,
    AttributeValueDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface AttributeDTO
 */
export interface AttributeDTO {
    /**
     * 
     * @type {number}
     * @memberof AttributeDTO
     */
    attributeId: number;
    /**
     * 
     * @type {string}
     * @memberof AttributeDTO
     */
    attributeName: string;
    /**
     * 
     * @type {Array<AttributeValueDTO>}
     * @memberof AttributeDTO
     */
    values: Array<AttributeValueDTO>;
    /**
     * 
     * @type {number}
     * @memberof AttributeDTO
     */
    creatorId: number;
    /**
     * 
     * @type {number}
     * @memberof AttributeDTO
     */
    editorId: number;
    /**
     * 
     * @type {string}
     * @memberof AttributeDTO
     */
    description?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AttributeDTO
     */
    editable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AttributeDTO
     */
    removable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AttributeDTO
     */
    repeatable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AttributeDTO
     */
    batchEditable?: boolean;
}

export function AttributeDTOFromJSON(json: any): AttributeDTO {
    return AttributeDTOFromJSONTyped(json, false);
}

export function AttributeDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): AttributeDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributeId': json['attributeId'],
        'attributeName': json['attributeName'],
        'values': ((json['values'] as Array<any>).map(AttributeValueDTOFromJSON)),
        'creatorId': json['creatorId'],
        'editorId': json['editorId'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'editable': !exists(json, 'editable') ? undefined : json['editable'],
        'removable': !exists(json, 'removable') ? undefined : json['removable'],
        'repeatable': !exists(json, 'repeatable') ? undefined : json['repeatable'],
        'batchEditable': !exists(json, 'batchEditable') ? undefined : json['batchEditable'],
    };
}

export function AttributeDTOToJSON(value?: AttributeDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributeId': value.attributeId,
        'attributeName': value.attributeName,
        'values': ((value.values as Array<any>).map(AttributeValueDTOToJSON)),
        'creatorId': value.creatorId,
        'editorId': value.editorId,
        'description': value.description,
        'editable': value.editable,
        'removable': value.removable,
        'repeatable': value.repeatable,
        'batchEditable': value.batchEditable,
    };
}


