/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtefactDataListDTO from '../model/ArtefactDataListDTO';
import CreateTextFragmentDTO from '../model/CreateTextFragmentDTO';
import LineDataListDTO from '../model/LineDataListDTO';
import LineTextDTO from '../model/LineTextDTO';
import TextEditionDTO from '../model/TextEditionDTO';
import TextFragmentDataDTO from '../model/TextFragmentDataDTO';
import TextFragmentDataListDTO from '../model/TextFragmentDataListDTO';
import UpdateTextFragmentDTO from '../model/UpdateTextFragmentDTO';

/**
* Text service.
* @module api/TextApi
* @version v1
*/
export default class TextApi {

    /**
    * Constructs a new TextApi. 
    * @alias module:api/TextApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1EditionsEditionIdLinesLineIdGet operation.
     * @callback module:api/TextApi~v1EditionsEditionIdLinesLineIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineTextDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all signs and their data from the given line
     * @param {Number} editionId Id of the edition
     * @param {Number} lineId Id of the line
     * @param {module:api/TextApi~v1EditionsEditionIdLinesLineIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineTextDTO}
     */
    v1EditionsEditionIdLinesLineIdGet(editionId, lineId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdLinesLineIdGet");
      }
      // verify the required parameter 'lineId' is set
      if (lineId === undefined || lineId === null) {
        throw new Error("Missing the required parameter 'lineId' when calling v1EditionsEditionIdLinesLineIdGet");
      }

      let pathParams = {
        'editionId': editionId,
        'lineId': lineId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = LineTextDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/lines/{lineId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdTextFragmentsGet operation.
     * @callback module:api/TextApi~v1EditionsEditionIdTextFragmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextFragmentDataListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the ids of all Fragments of all fragments in the given edition of a scroll
     * @param {Number} editionId Id of the edition
     * @param {module:api/TextApi~v1EditionsEditionIdTextFragmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextFragmentDataListDTO}
     */
    v1EditionsEditionIdTextFragmentsGet(editionId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdTextFragmentsGet");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TextFragmentDataListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/text-fragments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdTextFragmentsPost operation.
     * @callback module:api/TextApi~v1EditionsEditionIdTextFragmentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextFragmentDataDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new text fragment in the given edition of a scroll
     * @param {Number} editionId Id of the edition
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTextFragmentDTO} opts.createTextFragmentDTO A JSON object with the details of the new text fragment to be created
     * @param {module:api/TextApi~v1EditionsEditionIdTextFragmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextFragmentDataDTO}
     */
    v1EditionsEditionIdTextFragmentsPost(editionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createTextFragmentDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdTextFragmentsPost");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TextFragmentDataDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/text-fragments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGet operation.
     * @callback module:api/TextApi~v1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtefactDataListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the ids of all Artefacts in the given textFragmentName
     * @param {Number} editionId Id of the edition
     * @param {Number} textFragmentId Id of the text fragment
     * @param {module:api/TextApi~v1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtefactDataListDTO}
     */
    v1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGet(editionId, textFragmentId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGet");
      }
      // verify the required parameter 'textFragmentId' is set
      if (textFragmentId === undefined || textFragmentId === null) {
        throw new Error("Missing the required parameter 'textFragmentId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGet");
      }

      let pathParams = {
        'editionId': editionId,
        'textFragmentId': textFragmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArtefactDataListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/text-fragments/{textFragmentId}/artefacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdTextFragmentsTextFragmentIdGet operation.
     * @callback module:api/TextApi~v1EditionsEditionIdTextFragmentsTextFragmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextEditionDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all signs and their data from the given textFragmentName
     * @param {Number} editionId Id of the edition
     * @param {Number} textFragmentId Id of the text fragment
     * @param {module:api/TextApi~v1EditionsEditionIdTextFragmentsTextFragmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextEditionDTO}
     */
    v1EditionsEditionIdTextFragmentsTextFragmentIdGet(editionId, textFragmentId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdGet");
      }
      // verify the required parameter 'textFragmentId' is set
      if (textFragmentId === undefined || textFragmentId === null) {
        throw new Error("Missing the required parameter 'textFragmentId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdGet");
      }

      let pathParams = {
        'editionId': editionId,
        'textFragmentId': textFragmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TextEditionDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/text-fragments/{textFragmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdTextFragmentsTextFragmentIdLinesGet operation.
     * @callback module:api/TextApi~v1EditionsEditionIdTextFragmentsTextFragmentIdLinesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineDataListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the ids of all lines in the given textFragmentName
     * @param {Number} editionId Id of the edition
     * @param {Number} textFragmentId Id of the text fragment
     * @param {module:api/TextApi~v1EditionsEditionIdTextFragmentsTextFragmentIdLinesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineDataListDTO}
     */
    v1EditionsEditionIdTextFragmentsTextFragmentIdLinesGet(editionId, textFragmentId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdLinesGet");
      }
      // verify the required parameter 'textFragmentId' is set
      if (textFragmentId === undefined || textFragmentId === null) {
        throw new Error("Missing the required parameter 'textFragmentId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdLinesGet");
      }

      let pathParams = {
        'editionId': editionId,
        'textFragmentId': textFragmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = LineDataListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/text-fragments/{textFragmentId}/lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdTextFragmentsTextFragmentIdPut operation.
     * @callback module:api/TextApi~v1EditionsEditionIdTextFragmentsTextFragmentIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextFragmentDataDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified text fragment with the submitted properties
     * @param {Number} editionId Edition of the text fragment being updates
     * @param {Number} textFragmentId Id of the text fragment being updates
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTextFragmentDTO} opts.updateTextFragmentDTO Details of the updated text fragment
     * @param {module:api/TextApi~v1EditionsEditionIdTextFragmentsTextFragmentIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextFragmentDataDTO}
     */
    v1EditionsEditionIdTextFragmentsTextFragmentIdPut(editionId, textFragmentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateTextFragmentDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdPut");
      }
      // verify the required parameter 'textFragmentId' is set
      if (textFragmentId === undefined || textFragmentId === null) {
        throw new Error("Missing the required parameter 'textFragmentId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdPut");
      }

      let pathParams = {
        'editionId': editionId,
        'textFragmentId': textFragmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TextFragmentDataDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/text-fragments/{textFragmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
