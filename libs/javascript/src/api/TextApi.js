/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtefactDataListDTO from '../model/ArtefactDataListDTO';
import CreateTextFragmentDTO from '../model/CreateTextFragmentDTO';
import LineDataListDTO from '../model/LineDataListDTO';
import LineTextDTO from '../model/LineTextDTO';
import TextEditionDTO from '../model/TextEditionDTO';
import TextFragmentDataDTO from '../model/TextFragmentDataDTO';
import TextFragmentDataListDTO from '../model/TextFragmentDataListDTO';
import UpdateTextFragmentDTO from '../model/UpdateTextFragmentDTO';

/**
* Text service.
* @module api/TextApi
* @version 0.7.0
*/
export default class TextApi {

    /**
    * Constructs a new TextApi. 
    * @alias module:api/TextApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieves all signs and their data from the given line
     * @param {Number} editionId Id of the edition
     * @param {Number} lineId Id of the line
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LineTextDTO} and HTTP response
     */
    v1EditionsEditionIdLinesLineIdGetWithHttpInfo(editionId, lineId) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdLinesLineIdGet");
      }
      // verify the required parameter 'lineId' is set
      if (lineId === undefined || lineId === null) {
        throw new Error("Missing the required parameter 'lineId' when calling v1EditionsEditionIdLinesLineIdGet");
      }

      let pathParams = {
        'editionId': editionId,
        'lineId': lineId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = LineTextDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/lines/{lineId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves all signs and their data from the given line
     * @param {Number} editionId Id of the edition
     * @param {Number} lineId Id of the line
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LineTextDTO}
     */
    v1EditionsEditionIdLinesLineIdGet(editionId, lineId) {
      return this.v1EditionsEditionIdLinesLineIdGetWithHttpInfo(editionId, lineId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the ids of all Fragments of all fragments in the given edition of a scroll
     * @param {Number} editionId Id of the edition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TextFragmentDataListDTO} and HTTP response
     */
    v1EditionsEditionIdTextFragmentsGetWithHttpInfo(editionId) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdTextFragmentsGet");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TextFragmentDataListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/text-fragments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves the ids of all Fragments of all fragments in the given edition of a scroll
     * @param {Number} editionId Id of the edition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TextFragmentDataListDTO}
     */
    v1EditionsEditionIdTextFragmentsGet(editionId) {
      return this.v1EditionsEditionIdTextFragmentsGetWithHttpInfo(editionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new text fragment in the given edition of a scroll
     * @param {Number} editionId Id of the edition
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTextFragmentDTO} opts.createTextFragmentDTO A JSON object with the details of the new text fragment to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TextFragmentDataDTO} and HTTP response
     */
    v1EditionsEditionIdTextFragmentsPostWithHttpInfo(editionId, opts) {
      opts = opts || {};
      let postBody = opts['createTextFragmentDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdTextFragmentsPost");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TextFragmentDataDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/text-fragments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new text fragment in the given edition of a scroll
     * @param {Number} editionId Id of the edition
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTextFragmentDTO} opts.createTextFragmentDTO A JSON object with the details of the new text fragment to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TextFragmentDataDTO}
     */
    v1EditionsEditionIdTextFragmentsPost(editionId, opts) {
      return this.v1EditionsEditionIdTextFragmentsPostWithHttpInfo(editionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the ids of all Artefacts in the given textFragmentName
     * @param {Number} editionId Id of the edition
     * @param {Number} textFragmentId Id of the text fragment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtefactDataListDTO} and HTTP response
     */
    v1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGetWithHttpInfo(editionId, textFragmentId) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGet");
      }
      // verify the required parameter 'textFragmentId' is set
      if (textFragmentId === undefined || textFragmentId === null) {
        throw new Error("Missing the required parameter 'textFragmentId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGet");
      }

      let pathParams = {
        'editionId': editionId,
        'textFragmentId': textFragmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArtefactDataListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/text-fragments/{textFragmentId}/artefacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves the ids of all Artefacts in the given textFragmentName
     * @param {Number} editionId Id of the edition
     * @param {Number} textFragmentId Id of the text fragment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtefactDataListDTO}
     */
    v1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGet(editionId, textFragmentId) {
      return this.v1EditionsEditionIdTextFragmentsTextFragmentIdArtefactsGetWithHttpInfo(editionId, textFragmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves all signs and their data from the given textFragmentName
     * @param {Number} editionId Id of the edition
     * @param {Number} textFragmentId Id of the text fragment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TextEditionDTO} and HTTP response
     */
    v1EditionsEditionIdTextFragmentsTextFragmentIdGetWithHttpInfo(editionId, textFragmentId) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdGet");
      }
      // verify the required parameter 'textFragmentId' is set
      if (textFragmentId === undefined || textFragmentId === null) {
        throw new Error("Missing the required parameter 'textFragmentId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdGet");
      }

      let pathParams = {
        'editionId': editionId,
        'textFragmentId': textFragmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TextEditionDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/text-fragments/{textFragmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves all signs and their data from the given textFragmentName
     * @param {Number} editionId Id of the edition
     * @param {Number} textFragmentId Id of the text fragment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TextEditionDTO}
     */
    v1EditionsEditionIdTextFragmentsTextFragmentIdGet(editionId, textFragmentId) {
      return this.v1EditionsEditionIdTextFragmentsTextFragmentIdGetWithHttpInfo(editionId, textFragmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the ids of all lines in the given textFragmentName
     * @param {Number} editionId Id of the edition
     * @param {Number} textFragmentId Id of the text fragment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LineDataListDTO} and HTTP response
     */
    v1EditionsEditionIdTextFragmentsTextFragmentIdLinesGetWithHttpInfo(editionId, textFragmentId) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdLinesGet");
      }
      // verify the required parameter 'textFragmentId' is set
      if (textFragmentId === undefined || textFragmentId === null) {
        throw new Error("Missing the required parameter 'textFragmentId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdLinesGet");
      }

      let pathParams = {
        'editionId': editionId,
        'textFragmentId': textFragmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = LineDataListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/text-fragments/{textFragmentId}/lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves the ids of all lines in the given textFragmentName
     * @param {Number} editionId Id of the edition
     * @param {Number} textFragmentId Id of the text fragment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LineDataListDTO}
     */
    v1EditionsEditionIdTextFragmentsTextFragmentIdLinesGet(editionId, textFragmentId) {
      return this.v1EditionsEditionIdTextFragmentsTextFragmentIdLinesGetWithHttpInfo(editionId, textFragmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the specified text fragment with the submitted properties
     * @param {Number} editionId Edition of the text fragment being updates
     * @param {Number} textFragmentId Id of the text fragment being updates
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTextFragmentDTO} opts.updateTextFragmentDTO Details of the updated text fragment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TextFragmentDataDTO} and HTTP response
     */
    v1EditionsEditionIdTextFragmentsTextFragmentIdPutWithHttpInfo(editionId, textFragmentId, opts) {
      opts = opts || {};
      let postBody = opts['updateTextFragmentDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdPut");
      }
      // verify the required parameter 'textFragmentId' is set
      if (textFragmentId === undefined || textFragmentId === null) {
        throw new Error("Missing the required parameter 'textFragmentId' when calling v1EditionsEditionIdTextFragmentsTextFragmentIdPut");
      }

      let pathParams = {
        'editionId': editionId,
        'textFragmentId': textFragmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TextFragmentDataDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/text-fragments/{textFragmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the specified text fragment with the submitted properties
     * @param {Number} editionId Edition of the text fragment being updates
     * @param {Number} textFragmentId Id of the text fragment being updates
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTextFragmentDTO} opts.updateTextFragmentDTO Details of the updated text fragment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TextFragmentDataDTO}
     */
    v1EditionsEditionIdTextFragmentsTextFragmentIdPut(editionId, textFragmentId, opts) {
      return this.v1EditionsEditionIdTextFragmentsTextFragmentIdPutWithHttpInfo(editionId, textFragmentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
