/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImageInstitutionListDTO from '../model/ImageInstitutionListDTO';
import ImagedObjectDTO from '../model/ImagedObjectDTO';
import ImagedObjectListDTO from '../model/ImagedObjectListDTO';
import ImagedObjectTextFragmentMatchListDTO from '../model/ImagedObjectTextFragmentMatchListDTO';
import InstitutionalImageListDTO from '../model/InstitutionalImageListDTO';
import SimpleImageListDTO from '../model/SimpleImageListDTO';

/**
* ImagedObject service.
* @module api/ImagedObjectApi
* @version 0.7.2
*/
export default class ImagedObjectApi {

    /**
    * Constructs a new ImagedObjectApi. 
    * @alias module:api/ImagedObjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Provides a listing of imaged objects related to the specified edition, can include images and also their masks with  optional.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optional Set 'artefacts' to receive related artefact data and 'masks' to include the artefact masks
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImagedObjectListDTO} and HTTP response
     */
    v1EditionsEditionIdImagedObjectsGetWithHttpInfo(editionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdImagedObjectsGet");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
        'optional': this.apiClient.buildCollectionParam(opts['optional'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ImagedObjectListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/imaged-objects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides a listing of imaged objects related to the specified edition, can include images and also their masks with  optional.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optional Set 'artefacts' to receive related artefact data and 'masks' to include the artefact masks
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImagedObjectListDTO}
     */
    v1EditionsEditionIdImagedObjectsGet(editionId, opts) {
      return this.v1EditionsEditionIdImagedObjectsGetWithHttpInfo(editionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides information for the specified imaged object related to the specified edition, can include images and also  their masks with optional.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {String} imagedObjectId Unique Id of the desired object from the imaging Institution
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optional Set 'artefacts' to receive related artefact data and 'masks' to include the artefact masks
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImagedObjectDTO} and HTTP response
     */
    v1EditionsEditionIdImagedObjectsImagedObjectIdGetWithHttpInfo(editionId, imagedObjectId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdImagedObjectsImagedObjectIdGet");
      }
      // verify the required parameter 'imagedObjectId' is set
      if (imagedObjectId === undefined || imagedObjectId === null) {
        throw new Error("Missing the required parameter 'imagedObjectId' when calling v1EditionsEditionIdImagedObjectsImagedObjectIdGet");
      }

      let pathParams = {
        'editionId': editionId,
        'imagedObjectId': imagedObjectId
      };
      let queryParams = {
        'optional': this.apiClient.buildCollectionParam(opts['optional'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ImagedObjectDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/imaged-objects/{imagedObjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides information for the specified imaged object related to the specified edition, can include images and also  their masks with optional.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {String} imagedObjectId Unique Id of the desired object from the imaging Institution
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optional Set 'artefacts' to receive related artefact data and 'masks' to include the artefact masks
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImagedObjectDTO}
     */
    v1EditionsEditionIdImagedObjectsImagedObjectIdGet(editionId, imagedObjectId, opts) {
      return this.v1EditionsEditionIdImagedObjectsImagedObjectIdGetWithHttpInfo(editionId, imagedObjectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides information for the specified imaged object.
     * @param {String} imagedObjectId Unique Id of the desired object from the imaging Institution
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SimpleImageListDTO} and HTTP response
     */
    v1ImagedObjectsImagedObjectIdGetWithHttpInfo(imagedObjectId) {
      let postBody = null;
      // verify the required parameter 'imagedObjectId' is set
      if (imagedObjectId === undefined || imagedObjectId === null) {
        throw new Error("Missing the required parameter 'imagedObjectId' when calling v1ImagedObjectsImagedObjectIdGet");
      }

      let pathParams = {
        'imagedObjectId': imagedObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SimpleImageListDTO;
      return this.apiClient.callApi(
        '/v1/imaged-objects/{imagedObjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides information for the specified imaged object.
     * @param {String} imagedObjectId Unique Id of the desired object from the imaging Institution
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SimpleImageListDTO}
     */
    v1ImagedObjectsImagedObjectIdGet(imagedObjectId) {
      return this.v1ImagedObjectsImagedObjectIdGetWithHttpInfo(imagedObjectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides a list of all text fragments that should correspond to the imaged object.
     * @param {String} imagedObjectId Id of the imaged object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImagedObjectTextFragmentMatchListDTO} and HTTP response
     */
    v1ImagedObjectsImagedObjectIdTextFragmentsGetWithHttpInfo(imagedObjectId) {
      let postBody = null;
      // verify the required parameter 'imagedObjectId' is set
      if (imagedObjectId === undefined || imagedObjectId === null) {
        throw new Error("Missing the required parameter 'imagedObjectId' when calling v1ImagedObjectsImagedObjectIdTextFragmentsGet");
      }

      let pathParams = {
        'imagedObjectId': imagedObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ImagedObjectTextFragmentMatchListDTO;
      return this.apiClient.callApi(
        '/v1/imaged-objects/{imagedObjectId}/text-fragments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides a list of all text fragments that should correspond to the imaged object.
     * @param {String} imagedObjectId Id of the imaged object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImagedObjectTextFragmentMatchListDTO}
     */
    v1ImagedObjectsImagedObjectIdTextFragmentsGet(imagedObjectId) {
      return this.v1ImagedObjectsImagedObjectIdTextFragmentsGetWithHttpInfo(imagedObjectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides a list of all institutional image providers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImageInstitutionListDTO} and HTTP response
     */
    v1ImagedObjectsInstitutionsGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ImageInstitutionListDTO;
      return this.apiClient.callApi(
        '/v1/imaged-objects/institutions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides a list of all institutional image providers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImageInstitutionListDTO}
     */
    v1ImagedObjectsInstitutionsGet() {
      return this.v1ImagedObjectsInstitutionsGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides a list of all institutional image providers.
     * @param {String} institutionName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstitutionalImageListDTO} and HTTP response
     */
    v1ImagedObjectsInstitutionsInstitutionNameGetWithHttpInfo(institutionName) {
      let postBody = null;
      // verify the required parameter 'institutionName' is set
      if (institutionName === undefined || institutionName === null) {
        throw new Error("Missing the required parameter 'institutionName' when calling v1ImagedObjectsInstitutionsInstitutionNameGet");
      }

      let pathParams = {
        'institutionName': institutionName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InstitutionalImageListDTO;
      return this.apiClient.callApi(
        '/v1/imaged-objects/institutions/{institutionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides a list of all institutional image providers.
     * @param {String} institutionName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstitutionalImageListDTO}
     */
    v1ImagedObjectsInstitutionsInstitutionNameGet(institutionName) {
      return this.v1ImagedObjectsInstitutionsInstitutionNameGetWithHttpInfo(institutionName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
