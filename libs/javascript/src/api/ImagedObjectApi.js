/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImageInstitutionListDTO from '../model/ImageInstitutionListDTO';
import ImagedObjectDTO from '../model/ImagedObjectDTO';
import ImagedObjectListDTO from '../model/ImagedObjectListDTO';
import ImagedObjectTextFragmentMatchListDTO from '../model/ImagedObjectTextFragmentMatchListDTO';
import InstitutionalImageListDTO from '../model/InstitutionalImageListDTO';
import SimpleImageListDTO from '../model/SimpleImageListDTO';

/**
* ImagedObject service.
* @module api/ImagedObjectApi
* @version v1
*/
export default class ImagedObjectApi {

    /**
    * Constructs a new ImagedObjectApi. 
    * @alias module:api/ImagedObjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1EditionsEditionIdImagedObjectsGet operation.
     * @callback module:api/ImagedObjectApi~v1EditionsEditionIdImagedObjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagedObjectListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a listing of imaged objects related to the specified edition, can include images and also their masks with  optional.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optional Set 'artefacts' to receive related artefact data and 'masks' to include the artefact masks
     * @param {module:api/ImagedObjectApi~v1EditionsEditionIdImagedObjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagedObjectListDTO}
     */
    v1EditionsEditionIdImagedObjectsGet(editionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdImagedObjectsGet");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
        'optional': this.apiClient.buildCollectionParam(opts['optional'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ImagedObjectListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/imaged-objects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdImagedObjectsImagedObjectIdGet operation.
     * @callback module:api/ImagedObjectApi~v1EditionsEditionIdImagedObjectsImagedObjectIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagedObjectDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information for the specified imaged object related to the specified edition, can include images and also  their masks with optional.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {String} imagedObjectId Unique Id of the desired object from the imaging Institution
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optional Set 'artefacts' to receive related artefact data and 'masks' to include the artefact masks
     * @param {module:api/ImagedObjectApi~v1EditionsEditionIdImagedObjectsImagedObjectIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagedObjectDTO}
     */
    v1EditionsEditionIdImagedObjectsImagedObjectIdGet(editionId, imagedObjectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdImagedObjectsImagedObjectIdGet");
      }
      // verify the required parameter 'imagedObjectId' is set
      if (imagedObjectId === undefined || imagedObjectId === null) {
        throw new Error("Missing the required parameter 'imagedObjectId' when calling v1EditionsEditionIdImagedObjectsImagedObjectIdGet");
      }

      let pathParams = {
        'editionId': editionId,
        'imagedObjectId': imagedObjectId
      };
      let queryParams = {
        'optional': this.apiClient.buildCollectionParam(opts['optional'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ImagedObjectDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/imaged-objects/{imagedObjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ImagedObjectsImagedObjectIdGet operation.
     * @callback module:api/ImagedObjectApi~v1ImagedObjectsImagedObjectIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleImageListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information for the specified imaged object.
     * @param {String} imagedObjectId Unique Id of the desired object from the imaging Institution
     * @param {module:api/ImagedObjectApi~v1ImagedObjectsImagedObjectIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleImageListDTO}
     */
    v1ImagedObjectsImagedObjectIdGet(imagedObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'imagedObjectId' is set
      if (imagedObjectId === undefined || imagedObjectId === null) {
        throw new Error("Missing the required parameter 'imagedObjectId' when calling v1ImagedObjectsImagedObjectIdGet");
      }

      let pathParams = {
        'imagedObjectId': imagedObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SimpleImageListDTO;
      return this.apiClient.callApi(
        '/v1/imaged-objects/{imagedObjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ImagedObjectsImagedObjectIdTextFragmentsGet operation.
     * @callback module:api/ImagedObjectApi~v1ImagedObjectsImagedObjectIdTextFragmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagedObjectTextFragmentMatchListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of all text fragments that should correspond to the imaged object.
     * @param {String} imagedObjectId Id of the imaged object
     * @param {module:api/ImagedObjectApi~v1ImagedObjectsImagedObjectIdTextFragmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagedObjectTextFragmentMatchListDTO}
     */
    v1ImagedObjectsImagedObjectIdTextFragmentsGet(imagedObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'imagedObjectId' is set
      if (imagedObjectId === undefined || imagedObjectId === null) {
        throw new Error("Missing the required parameter 'imagedObjectId' when calling v1ImagedObjectsImagedObjectIdTextFragmentsGet");
      }

      let pathParams = {
        'imagedObjectId': imagedObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ImagedObjectTextFragmentMatchListDTO;
      return this.apiClient.callApi(
        '/v1/imaged-objects/{imagedObjectId}/text-fragments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ImagedObjectsInstitutionsGet operation.
     * @callback module:api/ImagedObjectApi~v1ImagedObjectsInstitutionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageInstitutionListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of all institutional image providers.
     * @param {module:api/ImagedObjectApi~v1ImagedObjectsInstitutionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageInstitutionListDTO}
     */
    v1ImagedObjectsInstitutionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ImageInstitutionListDTO;
      return this.apiClient.callApi(
        '/v1/imaged-objects/institutions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ImagedObjectsInstitutionsInstitutionNameGet operation.
     * @callback module:api/ImagedObjectApi~v1ImagedObjectsInstitutionsInstitutionNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstitutionalImageListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of all institutional image providers.
     * @param {String} institutionName 
     * @param {module:api/ImagedObjectApi~v1ImagedObjectsInstitutionsInstitutionNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstitutionalImageListDTO}
     */
    v1ImagedObjectsInstitutionsInstitutionNameGet(institutionName, callback) {
      let postBody = null;
      // verify the required parameter 'institutionName' is set
      if (institutionName === undefined || institutionName === null) {
        throw new Error("Missing the required parameter 'institutionName' when calling v1ImagedObjectsInstitutionsInstitutionNameGet");
      }

      let pathParams = {
        'institutionName': institutionName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InstitutionalImageListDTO;
      return this.apiClient.callApi(
        '/v1/imaged-objects/institutions/{institutionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
