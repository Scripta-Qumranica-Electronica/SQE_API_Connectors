/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CatalogueMatchInputDTO from '../model/CatalogueMatchInputDTO';
import CatalogueMatchListDTO from '../model/CatalogueMatchListDTO';

/**
* Catalogue service.
* @module api/CatalogueApi
* @version v1
*/
export default class CatalogueApi {

    /**
    * Constructs a new CatalogueApi. 
    * @alias module:api/CatalogueApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDelete operation.
     * @callback module:api/CatalogueApi~v1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an existing imaged object and text fragment match, which is not correct
     * @param {Number} iaaEditionCatalogToTextFragmentId The unique id of the match to confirm
     * @param {module:api/CatalogueApi~v1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDelete(iaaEditionCatalogToTextFragmentId, callback) {
      let postBody = null;
      // verify the required parameter 'iaaEditionCatalogToTextFragmentId' is set
      if (iaaEditionCatalogToTextFragmentId === undefined || iaaEditionCatalogToTextFragmentId === null) {
        throw new Error("Missing the required parameter 'iaaEditionCatalogToTextFragmentId' when calling v1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdDelete");
      }

      let pathParams = {
        'iaaEditionCatalogToTextFragmentId': iaaEditionCatalogToTextFragmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/catalogue/confirm-match/{iaaEditionCatalogToTextFragmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPost operation.
     * @callback module:api/CatalogueApi~v1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm the correctness of an existing imaged object and text fragment match
     * @param {Number} iaaEditionCatalogToTextFragmentId The unique id of the match to confirm
     * @param {module:api/CatalogueApi~v1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPost(iaaEditionCatalogToTextFragmentId, callback) {
      let postBody = null;
      // verify the required parameter 'iaaEditionCatalogToTextFragmentId' is set
      if (iaaEditionCatalogToTextFragmentId === undefined || iaaEditionCatalogToTextFragmentId === null) {
        throw new Error("Missing the required parameter 'iaaEditionCatalogToTextFragmentId' when calling v1CatalogueConfirmMatchIaaEditionCatalogToTextFragmentIdPost");
      }

      let pathParams = {
        'iaaEditionCatalogToTextFragmentId': iaaEditionCatalogToTextFragmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/catalogue/confirm-match/{iaaEditionCatalogToTextFragmentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGet operation.
     * @callback module:api/CatalogueApi~v1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogueMatchListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a listing of all corresponding imaged objects and transcribed text fragment in a specified edition
     * @param {Number} editionId Unique Id of the edition to search for imaged objects to text fragment matches
     * @param {module:api/CatalogueApi~v1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogueMatchListDTO}
     */
    v1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGet(editionId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1CatalogueEditionsEditionIdImagedObjectTextFragmentMatchesGet");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CatalogueMatchListDTO;
      return this.apiClient.callApi(
        '/v1/catalogue/editions/{editionId}/imaged-object-text-fragment-matches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CatalogueImagedObjectsImagedObjectIdTextFragmentsGet operation.
     * @callback module:api/CatalogueApi~v1CatalogueImagedObjectsImagedObjectIdTextFragmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogueMatchListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a listing of all text fragments matches that correspond to an imaged object
     * @param {String} imagedObjectId Id of imaged object to search for transcription matches
     * @param {module:api/CatalogueApi~v1CatalogueImagedObjectsImagedObjectIdTextFragmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogueMatchListDTO}
     */
    v1CatalogueImagedObjectsImagedObjectIdTextFragmentsGet(imagedObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'imagedObjectId' is set
      if (imagedObjectId === undefined || imagedObjectId === null) {
        throw new Error("Missing the required parameter 'imagedObjectId' when calling v1CatalogueImagedObjectsImagedObjectIdTextFragmentsGet");
      }

      let pathParams = {
        'imagedObjectId': imagedObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CatalogueMatchListDTO;
      return this.apiClient.callApi(
        '/v1/catalogue/imaged-objects/{imagedObjectId}/text-fragments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGet operation.
     * @callback module:api/CatalogueApi~v1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogueMatchListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a listing of all corresponding imaged objects and transcribed text fragment in a specified manuscript
     * @param {Number} manuscriptId Unique Id of the manuscript to search for imaged objects to text fragment matches
     * @param {module:api/CatalogueApi~v1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogueMatchListDTO}
     */
    v1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGet(manuscriptId, callback) {
      let postBody = null;
      // verify the required parameter 'manuscriptId' is set
      if (manuscriptId === undefined || manuscriptId === null) {
        throw new Error("Missing the required parameter 'manuscriptId' when calling v1CatalogueManuscriptsManuscriptIdImagedObjectTextFragmentMatchesGet");
      }

      let pathParams = {
        'manuscriptId': manuscriptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CatalogueMatchListDTO;
      return this.apiClient.callApi(
        '/v1/catalogue/manuscripts/{manuscriptId}/imaged-object-text-fragment-matches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CataloguePost operation.
     * @callback module:api/CatalogueApi~v1CataloguePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new matched pair for an imaged object and a text fragment along with the edition princeps information
     * @param {Object} opts Optional parameters
     * @param {module:model/CatalogueMatchInputDTO} opts.catalogueMatchInputDTO The details of the new match
     * @param {module:api/CatalogueApi~v1CataloguePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1CataloguePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['catalogueMatchInputDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/catalogue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CatalogueTextFragmentsTextFragmentIdImagedObjectsGet operation.
     * @callback module:api/CatalogueApi~v1CatalogueTextFragmentsTextFragmentIdImagedObjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogueMatchListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a listing of all imaged objects that matches that correspond to a transcribed text fragment
     * @param {Number} textFragmentId Unique Id of the text fragment to search for imaged object matches
     * @param {module:api/CatalogueApi~v1CatalogueTextFragmentsTextFragmentIdImagedObjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogueMatchListDTO}
     */
    v1CatalogueTextFragmentsTextFragmentIdImagedObjectsGet(textFragmentId, callback) {
      let postBody = null;
      // verify the required parameter 'textFragmentId' is set
      if (textFragmentId === undefined || textFragmentId === null) {
        throw new Error("Missing the required parameter 'textFragmentId' when calling v1CatalogueTextFragmentsTextFragmentIdImagedObjectsGet");
      }

      let pathParams = {
        'textFragmentId': textFragmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CatalogueMatchListDTO;
      return this.apiClient.callApi(
        '/v1/catalogue/text-fragments/{textFragmentId}/imaged-objects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
