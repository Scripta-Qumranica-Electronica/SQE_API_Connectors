/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountActivationRequestDTO from '../model/AccountActivationRequestDTO';
import DetailedUserDTO from '../model/DetailedUserDTO';
import DetailedUserTokenDTO from '../model/DetailedUserTokenDTO';
import LoginRequestDTO from '../model/LoginRequestDTO';
import NewUserRequestDTO from '../model/NewUserRequestDTO';
import ResendUserAccountActivationRequestDTO from '../model/ResendUserAccountActivationRequestDTO';
import ResetForgottenUserPasswordRequestDTO from '../model/ResetForgottenUserPasswordRequestDTO';
import ResetLoggedInUserPasswordRequestDTO from '../model/ResetLoggedInUserPasswordRequestDTO';
import ResetUserPasswordRequestDTO from '../model/ResetUserPasswordRequestDTO';
import UnactivatedEmailUpdateRequestDTO from '../model/UnactivatedEmailUpdateRequestDTO';
import UserDTO from '../model/UserDTO';
import UserUpdateRequestDTO from '../model/UserUpdateRequestDTO';

/**
* User service.
* @module api/UserApi
* @version 0.7.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Uses the secret token from /users/forgot-password to validate a reset of the user's password
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetForgottenUserPasswordRequestDTO} opts.resetForgottenUserPasswordRequestDTO A JSON object with the secret token and the new password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1UsersChangeForgottenPasswordPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['resetForgottenUserPasswordRequestDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/change-forgotten-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Uses the secret token from /users/forgot-password to validate a reset of the user's password
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetForgottenUserPasswordRequestDTO} opts.resetForgottenUserPasswordRequestDTO A JSON object with the secret token and the new password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1UsersChangeForgottenPasswordPost(opts) {
      return this.v1UsersChangeForgottenPasswordPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Changes the password for the currently logged in user
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetLoggedInUserPasswordRequestDTO} opts.resetLoggedInUserPasswordRequestDTO A JSON object with the old password and the new password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1UsersChangePasswordPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['resetLoggedInUserPasswordRequestDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/change-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Changes the password for the currently logged in user
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetLoggedInUserPasswordRequestDTO} opts.resetLoggedInUserPasswordRequestDTO A JSON object with the old password and the new password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1UsersChangePasswordPost(opts) {
      return this.v1UsersChangePasswordPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Allows a user who has not yet activated their account to change their email address. This will not work if the user  account associated with the email address has already been activated
     * @param {Object} opts Optional parameters
     * @param {module:model/UnactivatedEmailUpdateRequestDTO} opts.unactivatedEmailUpdateRequestDTO JSON object with the current email address and the new desired email address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1UsersChangeUnactivatedEmailPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['unactivatedEmailUpdateRequestDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/change-unactivated-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Allows a user who has not yet activated their account to change their email address. This will not work if the user  account associated with the email address has already been activated
     * @param {Object} opts Optional parameters
     * @param {module:model/UnactivatedEmailUpdateRequestDTO} opts.unactivatedEmailUpdateRequestDTO JSON object with the current email address and the new desired email address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1UsersChangeUnactivatedEmailPost(opts) {
      return this.v1UsersChangeUnactivatedEmailPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Confirms registration of new user account.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountActivationRequestDTO} opts.accountActivationRequestDTO JSON object with token from user registration email
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1UsersConfirmRegistrationPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['accountActivationRequestDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/confirm-registration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Confirms registration of new user account.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountActivationRequestDTO} opts.accountActivationRequestDTO JSON object with token from user registration email
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1UsersConfirmRegistrationPost(opts) {
      return this.v1UsersConfirmRegistrationPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a secret token to the user's email to allow password reset.
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetUserPasswordRequestDTO} opts.resetUserPasswordRequestDTO JSON object with the email address for the user who wants to reset a lost password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1UsersForgotPasswordPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['resetUserPasswordRequestDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/forgot-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sends a secret token to the user's email to allow password reset.
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetUserPasswordRequestDTO} opts.resetUserPasswordRequestDTO JSON object with the email address for the user who wants to reset a lost password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1UsersForgotPasswordPost(opts) {
      return this.v1UsersForgotPasswordPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides the user details for a user with valid JWT in the Authorize header
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserDTO} and HTTP response
     */
    v1UsersGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides the user details for a user with valid JWT in the Authorize header
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserDTO}
     */
    v1UsersGet() {
      return this.v1UsersGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides a JWT bearer token for valid email and password
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginRequestDTO} opts.loginRequestDTO JSON object with an email and password parameter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DetailedUserTokenDTO} and HTTP response
     */
    v1UsersLoginPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['loginRequestDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DetailedUserTokenDTO;
      return this.apiClient.callApi(
        '/v1/users/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides a JWT bearer token for valid email and password
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginRequestDTO} opts.loginRequestDTO JSON object with an email and password parameter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DetailedUserTokenDTO}
     */
    v1UsersLoginPost(opts) {
      return this.v1UsersLoginPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new user with the submitted data.
     * @param {Object} opts Optional parameters
     * @param {module:model/NewUserRequestDTO} opts.newUserRequestDTO A JSON object with all data necessary to create a new user account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserDTO} and HTTP response
     */
    v1UsersPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['newUserRequestDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/v1/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new user with the submitted data.
     * @param {Object} opts Optional parameters
     * @param {module:model/NewUserRequestDTO} opts.newUserRequestDTO A JSON object with all data necessary to create a new user account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserDTO}
     */
    v1UsersPost(opts) {
      return this.v1UsersPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a user's registration details.  Note that the if the email address has changed, the account will be set to  inactive until the account is activated with the secret token.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserUpdateRequestDTO} opts.userUpdateRequestDTO A JSON object with all data necessary to update a user account.  Null fields (but not empty  strings!) will be populated with existing user data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DetailedUserDTO} and HTTP response
     */
    v1UsersPutWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['userUpdateRequestDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DetailedUserDTO;
      return this.apiClient.callApi(
        '/v1/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a user's registration details.  Note that the if the email address has changed, the account will be set to  inactive until the account is activated with the secret token.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserUpdateRequestDTO} opts.userUpdateRequestDTO A JSON object with all data necessary to update a user account.  Null fields (but not empty  strings!) will be populated with existing user data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DetailedUserDTO}
     */
    v1UsersPut(opts) {
      return this.v1UsersPutWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a new activation email for the user's account. This will not work if the user account associated with the  email address has already been activated.
     * @param {Object} opts Optional parameters
     * @param {module:model/ResendUserAccountActivationRequestDTO} opts.resendUserAccountActivationRequestDTO JSON object with the current email address and the new desired email address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1UsersResendActivationEmailPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['resendUserAccountActivationRequestDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/resend-activation-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sends a new activation email for the user's account. This will not work if the user account associated with the  email address has already been activated.
     * @param {Object} opts Optional parameters
     * @param {module:model/ResendUserAccountActivationRequestDTO} opts.resendUserAccountActivationRequestDTO JSON object with the current email address and the new desired email address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1UsersResendActivationEmailPost(opts) {
      return this.v1UsersResendActivationEmailPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
