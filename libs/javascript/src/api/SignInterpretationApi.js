/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttributeDTO from '../model/AttributeDTO';
import AttributeListDTO from '../model/AttributeListDTO';
import CommentaryCreateDTO from '../model/CommentaryCreateDTO';
import CreateAttributeDTO from '../model/CreateAttributeDTO';
import InterpretationAttributeCreateDTO from '../model/InterpretationAttributeCreateDTO';
import SignInterpretationCreateDTO from '../model/SignInterpretationCreateDTO';
import SignInterpretationDTO from '../model/SignInterpretationDTO';
import SignInterpretationListDTO from '../model/SignInterpretationListDTO';
import UpdateAttributeDTO from '../model/UpdateAttributeDTO';

/**
* SignInterpretation service.
* @module api/SignInterpretationApi
* @version v1
*/
export default class SignInterpretationApi {

    /**
    * Constructs a new SignInterpretationApi. 
    * @alias module:api/SignInterpretationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsAttributesAttributeIdDelete operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsAttributesAttributeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an attribute from an edition
     * @param {Number} editionId The ID of the edition being edited
     * @param {Number} attributeId The ID of the attribute to delete
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsAttributesAttributeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1EditionsEditionIdSignInterpretationsAttributesAttributeIdDelete(editionId, attributeId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsAttributesAttributeIdDelete");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling v1EditionsEditionIdSignInterpretationsAttributesAttributeIdDelete");
      }

      let pathParams = {
        'editionId': editionId,
        'attributeId': attributeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations-attributes/{attributeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsAttributesAttributeIdPut operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsAttributesAttributeIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the details of an attribute in an edition
     * @param {Number} editionId The ID of the edition being edited
     * @param {Number} attributeId The ID of the attribute to update
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateAttributeDTO} opts.updateAttributeDTO The details of the updated attribute
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsAttributesAttributeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDTO}
     */
    v1EditionsEditionIdSignInterpretationsAttributesAttributeIdPut(editionId, attributeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateAttributeDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsAttributesAttributeIdPut");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling v1EditionsEditionIdSignInterpretationsAttributesAttributeIdPut");
      }

      let pathParams = {
        'editionId': editionId,
        'attributeId': attributeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AttributeDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations-attributes/{attributeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsAttributesGet operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsAttributesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all possible attributes for an edition
     * @param {Number} editionId The ID of the edition being searched
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsAttributesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeListDTO}
     */
    v1EditionsEditionIdSignInterpretationsAttributesGet(editionId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsAttributesGet");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AttributeListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations-attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsAttributesPost operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsAttributesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new attribute for an edition
     * @param {Number} editionId The ID of the edition being edited
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAttributeDTO} opts.createAttributeDTO The details of the new attribute
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsAttributesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDTO}
     */
    v1EditionsEditionIdSignInterpretationsAttributesPost(editionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createAttributeDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsAttributesPost");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AttributeDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations-attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsPost operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignInterpretationListDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new sign interpretation
     * @param {Number} editionId ID of the edition being changed
     * @param {Object} opts Optional parameters
     * @param {module:model/SignInterpretationCreateDTO} opts.signInterpretationCreateDTO New sign interpretation data to be added
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignInterpretationListDTO}
     */
    v1EditionsEditionIdSignInterpretationsPost(editionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['signInterpretationCreateDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsPost");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SignInterpretationListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdDelete operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This deletes the specified attribute value from the specified sign interpretation.
     * @param {Number} editionId ID of the edition being changed
     * @param {Number} signInterpretationId ID of the sign interpretation being altered
     * @param {Number} attributeValueId Id of the attribute being removed
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdDelete(editionId, signInterpretationId, attributeValueId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdDelete");
      }
      // verify the required parameter 'signInterpretationId' is set
      if (signInterpretationId === undefined || signInterpretationId === null) {
        throw new Error("Missing the required parameter 'signInterpretationId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdDelete");
      }
      // verify the required parameter 'attributeValueId' is set
      if (attributeValueId === undefined || attributeValueId === null) {
        throw new Error("Missing the required parameter 'attributeValueId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdDelete");
      }

      let pathParams = {
        'editionId': editionId,
        'signInterpretationId': signInterpretationId,
        'attributeValueId': attributeValueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations/{signInterpretationId}/attributes/{attributeValueId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdPut operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignInterpretationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This changes the values of the specified sign interpretation attribute,  mainly used to change commentary.
     * @param {Number} editionId ID of the edition being changed
     * @param {Number} signInterpretationId ID of the sign interpretation being altered
     * @param {Number} attributeValueId Id of the attribute value to be altered
     * @param {Object} opts Optional parameters
     * @param {module:model/InterpretationAttributeCreateDTO} opts.interpretationAttributeCreateDTO New details of the attribute
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignInterpretationDTO}
     */
    v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdPut(editionId, signInterpretationId, attributeValueId, opts, callback) {
      opts = opts || {};
      let postBody = opts['interpretationAttributeCreateDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdPut");
      }
      // verify the required parameter 'signInterpretationId' is set
      if (signInterpretationId === undefined || signInterpretationId === null) {
        throw new Error("Missing the required parameter 'signInterpretationId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdPut");
      }
      // verify the required parameter 'attributeValueId' is set
      if (attributeValueId === undefined || attributeValueId === null) {
        throw new Error("Missing the required parameter 'attributeValueId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesAttributeValueIdPut");
      }

      let pathParams = {
        'editionId': editionId,
        'signInterpretationId': signInterpretationId,
        'attributeValueId': attributeValueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SignInterpretationDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations/{signInterpretationId}/attributes/{attributeValueId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesPost operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignInterpretationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This adds a new attribute to the specified sign interpretation.
     * @param {Number} editionId ID of the edition being changed
     * @param {Number} signInterpretationId ID of the sign interpretation for adding a new attribute
     * @param {Object} opts Optional parameters
     * @param {module:model/InterpretationAttributeCreateDTO} opts.interpretationAttributeCreateDTO Details of the attribute to be added
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignInterpretationDTO}
     */
    v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesPost(editionId, signInterpretationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['interpretationAttributeCreateDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesPost");
      }
      // verify the required parameter 'signInterpretationId' is set
      if (signInterpretationId === undefined || signInterpretationId === null) {
        throw new Error("Missing the required parameter 'signInterpretationId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdAttributesPost");
      }

      let pathParams = {
        'editionId': editionId,
        'signInterpretationId': signInterpretationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SignInterpretationDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations/{signInterpretationId}/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsSignInterpretationIdCommentaryPut operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdCommentaryPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignInterpretationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the commentary of a sign interpretation
     * @param {Number} editionId ID of the edition being changed
     * @param {Number} signInterpretationId ID of the sign interpretation whose commentary is being changed
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentaryCreateDTO} opts.commentaryCreateDTO The new commentary for the sign interpretation
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdCommentaryPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignInterpretationDTO}
     */
    v1EditionsEditionIdSignInterpretationsSignInterpretationIdCommentaryPut(editionId, signInterpretationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentaryCreateDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdCommentaryPut");
      }
      // verify the required parameter 'signInterpretationId' is set
      if (signInterpretationId === undefined || signInterpretationId === null) {
        throw new Error("Missing the required parameter 'signInterpretationId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdCommentaryPut");
      }

      let pathParams = {
        'editionId': editionId,
        'signInterpretationId': signInterpretationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SignInterpretationDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations/{signInterpretationId}/commentary', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsSignInterpretationIdDelete operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the sign interpretation in the route. The endpoint automatically manages the sign stream  by connecting all the deleted sign's next and previous nodes.
     * @param {Number} editionId ID of the edition being changed
     * @param {Number} signInterpretationId ID of the sign interpretation being deleted
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1EditionsEditionIdSignInterpretationsSignInterpretationIdDelete(editionId, signInterpretationId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdDelete");
      }
      // verify the required parameter 'signInterpretationId' is set
      if (signInterpretationId === undefined || signInterpretationId === null) {
        throw new Error("Missing the required parameter 'signInterpretationId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdDelete");
      }

      let pathParams = {
        'editionId': editionId,
        'signInterpretationId': signInterpretationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations/{signInterpretationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsSignInterpretationIdGet operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignInterpretationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the details of a sign interpretation in an edition
     * @param {Number} editionId The ID of the edition being searched
     * @param {Number} signInterpretationId The desired sign interpretation id
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignInterpretationDTO}
     */
    v1EditionsEditionIdSignInterpretationsSignInterpretationIdGet(editionId, signInterpretationId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdGet");
      }
      // verify the required parameter 'signInterpretationId' is set
      if (signInterpretationId === undefined || signInterpretationId === null) {
        throw new Error("Missing the required parameter 'signInterpretationId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdGet");
      }

      let pathParams = {
        'editionId': editionId,
        'signInterpretationId': signInterpretationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SignInterpretationDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations/{signInterpretationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsSignInterpretationIdLinkToNextSignInterpretationIdPost operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdLinkToNextSignInterpretationIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignInterpretationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Links two sign interpretations in the edition's sign stream
     * @param {Number} editionId ID of the edition being changed
     * @param {Number} signInterpretationId The sign interpretation to be linked to the nextSignInterpretationId
     * @param {Number} nextSignInterpretationId The sign interpretation to become the new next sign interpretation
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdLinkToNextSignInterpretationIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignInterpretationDTO}
     */
    v1EditionsEditionIdSignInterpretationsSignInterpretationIdLinkToNextSignInterpretationIdPost(editionId, signInterpretationId, nextSignInterpretationId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdLinkToNextSignInterpretationIdPost");
      }
      // verify the required parameter 'signInterpretationId' is set
      if (signInterpretationId === undefined || signInterpretationId === null) {
        throw new Error("Missing the required parameter 'signInterpretationId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdLinkToNextSignInterpretationIdPost");
      }
      // verify the required parameter 'nextSignInterpretationId' is set
      if (nextSignInterpretationId === undefined || nextSignInterpretationId === null) {
        throw new Error("Missing the required parameter 'nextSignInterpretationId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdLinkToNextSignInterpretationIdPost");
      }

      let pathParams = {
        'editionId': editionId,
        'signInterpretationId': signInterpretationId,
        'nextSignInterpretationId': nextSignInterpretationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SignInterpretationDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations/{signInterpretationId}/link-to/{nextSignInterpretationId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1EditionsEditionIdSignInterpretationsSignInterpretationIdUnlinkFromNextSignInterpretationIdPost operation.
     * @callback module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdUnlinkFromNextSignInterpretationIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignInterpretationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Links two sign interpretations in the edition's sign stream
     * @param {Number} editionId ID of the edition being changed
     * @param {Number} signInterpretationId The sign interpretation to be unlinked from the nextSignInterpretationId
     * @param {Number} nextSignInterpretationId The sign interpretation to removed as next sign interpretation
     * @param {module:api/SignInterpretationApi~v1EditionsEditionIdSignInterpretationsSignInterpretationIdUnlinkFromNextSignInterpretationIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignInterpretationDTO}
     */
    v1EditionsEditionIdSignInterpretationsSignInterpretationIdUnlinkFromNextSignInterpretationIdPost(editionId, signInterpretationId, nextSignInterpretationId, callback) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdUnlinkFromNextSignInterpretationIdPost");
      }
      // verify the required parameter 'signInterpretationId' is set
      if (signInterpretationId === undefined || signInterpretationId === null) {
        throw new Error("Missing the required parameter 'signInterpretationId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdUnlinkFromNextSignInterpretationIdPost");
      }
      // verify the required parameter 'nextSignInterpretationId' is set
      if (nextSignInterpretationId === undefined || nextSignInterpretationId === null) {
        throw new Error("Missing the required parameter 'nextSignInterpretationId' when calling v1EditionsEditionIdSignInterpretationsSignInterpretationIdUnlinkFromNextSignInterpretationIdPost");
      }

      let pathParams = {
        'editionId': editionId,
        'signInterpretationId': signInterpretationId,
        'nextSignInterpretationId': nextSignInterpretationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SignInterpretationDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/sign-interpretations/{signInterpretationId}/unlink-from/{nextSignInterpretationId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
