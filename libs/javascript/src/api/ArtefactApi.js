/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtefactDTO from '../model/ArtefactDTO';
import ArtefactGroupDTO from '../model/ArtefactGroupDTO';
import ArtefactGroupListDTO from '../model/ArtefactGroupListDTO';
import ArtefactListDTO from '../model/ArtefactListDTO';
import ArtefactTextFragmentMatchListDTO from '../model/ArtefactTextFragmentMatchListDTO';
import BatchUpdateArtefactPlacementDTO from '../model/BatchUpdateArtefactPlacementDTO';
import BatchUpdatedArtefactTransformDTO from '../model/BatchUpdatedArtefactTransformDTO';
import CreateArtefactDTO from '../model/CreateArtefactDTO';
import CreateArtefactGroupDTO from '../model/CreateArtefactGroupDTO';
import DeleteDTO from '../model/DeleteDTO';
import InterpretationRoiDTOList from '../model/InterpretationRoiDTOList';
import UpdateArtefactDTO from '../model/UpdateArtefactDTO';
import UpdateArtefactGroupDTO from '../model/UpdateArtefactGroupDTO';

/**
* Artefact service.
* @module api/ArtefactApi
* @version 0.7.2
*/
export default class ArtefactApi {

    /**
    * Constructs a new ArtefactApi. 
    * @alias module:api/ArtefactApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deletes the specified artefact group.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactGroupId Unique Id of the artefact group to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteDTO} and HTTP response
     */
    v1EditionsEditionIdArtefactGroupsArtefactGroupIdDeleteWithHttpInfo(editionId, artefactGroupId) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactGroupsArtefactGroupIdDelete");
      }
      // verify the required parameter 'artefactGroupId' is set
      if (artefactGroupId === undefined || artefactGroupId === null) {
        throw new Error("Missing the required parameter 'artefactGroupId' when calling v1EditionsEditionIdArtefactGroupsArtefactGroupIdDelete");
      }

      let pathParams = {
        'editionId': editionId,
        'artefactGroupId': artefactGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DeleteDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefact-groups/{artefactGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the specified artefact group.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactGroupId Unique Id of the artefact group to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteDTO}
     */
    v1EditionsEditionIdArtefactGroupsArtefactGroupIdDelete(editionId, artefactGroupId) {
      return this.v1EditionsEditionIdArtefactGroupsArtefactGroupIdDeleteWithHttpInfo(editionId, artefactGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the details of a specific artefact group in the edition
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactGroupId Id of the desired artefact group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtefactGroupDTO} and HTTP response
     */
    v1EditionsEditionIdArtefactGroupsArtefactGroupIdGetWithHttpInfo(editionId, artefactGroupId) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactGroupsArtefactGroupIdGet");
      }
      // verify the required parameter 'artefactGroupId' is set
      if (artefactGroupId === undefined || artefactGroupId === null) {
        throw new Error("Missing the required parameter 'artefactGroupId' when calling v1EditionsEditionIdArtefactGroupsArtefactGroupIdGet");
      }

      let pathParams = {
        'editionId': editionId,
        'artefactGroupId': artefactGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArtefactGroupDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefact-groups/{artefactGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets the details of a specific artefact group in the edition
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactGroupId Id of the desired artefact group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtefactGroupDTO}
     */
    v1EditionsEditionIdArtefactGroupsArtefactGroupIdGet(editionId, artefactGroupId) {
      return this.v1EditionsEditionIdArtefactGroupsArtefactGroupIdGetWithHttpInfo(editionId, artefactGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the details of an artefact group.  The artefact group will now only contain the artefacts listed in the JSON payload.  If the name is null, no change will be made, otherwise the name will also be updated.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactGroupId Id of the artefact group to be updated
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateArtefactGroupDTO} opts.updateArtefactGroupDTO Parameters that the artefact group should be changed to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtefactGroupDTO} and HTTP response
     */
    v1EditionsEditionIdArtefactGroupsArtefactGroupIdPutWithHttpInfo(editionId, artefactGroupId, opts) {
      opts = opts || {};
      let postBody = opts['updateArtefactGroupDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactGroupsArtefactGroupIdPut");
      }
      // verify the required parameter 'artefactGroupId' is set
      if (artefactGroupId === undefined || artefactGroupId === null) {
        throw new Error("Missing the required parameter 'artefactGroupId' when calling v1EditionsEditionIdArtefactGroupsArtefactGroupIdPut");
      }

      let pathParams = {
        'editionId': editionId,
        'artefactGroupId': artefactGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArtefactGroupDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefact-groups/{artefactGroupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the details of an artefact group.  The artefact group will now only contain the artefacts listed in the JSON payload.  If the name is null, no change will be made, otherwise the name will also be updated.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactGroupId Id of the artefact group to be updated
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateArtefactGroupDTO} opts.updateArtefactGroupDTO Parameters that the artefact group should be changed to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtefactGroupDTO}
     */
    v1EditionsEditionIdArtefactGroupsArtefactGroupIdPut(editionId, artefactGroupId, opts) {
      return this.v1EditionsEditionIdArtefactGroupsArtefactGroupIdPutWithHttpInfo(editionId, artefactGroupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a listing of all artefact groups in the edition
     * @param {Number} editionId Unique Id of the desired edition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtefactGroupListDTO} and HTTP response
     */
    v1EditionsEditionIdArtefactGroupsGetWithHttpInfo(editionId) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactGroupsGet");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArtefactGroupListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefact-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a listing of all artefact groups in the edition
     * @param {Number} editionId Unique Id of the desired edition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtefactGroupListDTO}
     */
    v1EditionsEditionIdArtefactGroupsGet(editionId) {
      return this.v1EditionsEditionIdArtefactGroupsGetWithHttpInfo(editionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new artefact group with the submitted data.  The new artefact must have a list of artefacts that belong to the group.  It is not necessary to give the group a name.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateArtefactGroupDTO} opts.createArtefactGroupDTO Parameters of the new artefact group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtefactGroupDTO} and HTTP response
     */
    v1EditionsEditionIdArtefactGroupsPostWithHttpInfo(editionId, opts) {
      opts = opts || {};
      let postBody = opts['createArtefactGroupDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactGroupsPost");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArtefactGroupDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefact-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new artefact group with the submitted data.  The new artefact must have a list of artefacts that belong to the group.  It is not necessary to give the group a name.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateArtefactGroupDTO} opts.createArtefactGroupDTO Parameters of the new artefact group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtefactGroupDTO}
     */
    v1EditionsEditionIdArtefactGroupsPost(editionId, opts) {
      return this.v1EditionsEditionIdArtefactGroupsPostWithHttpInfo(editionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the specified artefact
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactId Unique Id of the desired artefact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1EditionsEditionIdArtefactsArtefactIdDeleteWithHttpInfo(editionId, artefactId) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactsArtefactIdDelete");
      }
      // verify the required parameter 'artefactId' is set
      if (artefactId === undefined || artefactId === null) {
        throw new Error("Missing the required parameter 'artefactId' when calling v1EditionsEditionIdArtefactsArtefactIdDelete");
      }

      let pathParams = {
        'editionId': editionId,
        'artefactId': artefactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefacts/{artefactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes the specified artefact
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactId Unique Id of the desired artefact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1EditionsEditionIdArtefactsArtefactIdDelete(editionId, artefactId) {
      return this.v1EditionsEditionIdArtefactsArtefactIdDeleteWithHttpInfo(editionId, artefactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides a listing of all artefacts that are part of the specified edition
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactId Unique Id of the desired artefact
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optional Add \"masks\" to include artefact polygons and \"images\" to include image data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtefactDTO} and HTTP response
     */
    v1EditionsEditionIdArtefactsArtefactIdGetWithHttpInfo(editionId, artefactId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactsArtefactIdGet");
      }
      // verify the required parameter 'artefactId' is set
      if (artefactId === undefined || artefactId === null) {
        throw new Error("Missing the required parameter 'artefactId' when calling v1EditionsEditionIdArtefactsArtefactIdGet");
      }

      let pathParams = {
        'editionId': editionId,
        'artefactId': artefactId
      };
      let queryParams = {
        'optional': this.apiClient.buildCollectionParam(opts['optional'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArtefactDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefacts/{artefactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides a listing of all artefacts that are part of the specified edition
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactId Unique Id of the desired artefact
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optional Add \"masks\" to include artefact polygons and \"images\" to include image data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtefactDTO}
     */
    v1EditionsEditionIdArtefactsArtefactIdGet(editionId, artefactId, opts) {
      return this.v1EditionsEditionIdArtefactsArtefactIdGetWithHttpInfo(editionId, artefactId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the specified artefact.  There are many possible attributes that can be changed for  an artefact.  The caller should only input only those that  should be changed. Attributes with a null value will be ignored.  For instance, setting the mask to null or \"\" will result in  no changes to the current mask, and no value for the mask will  be returned (or broadcast). Likewise, the transformation, name,  or status message may be set to null and no change will be made  to those entities (though any unchanged values will be returned  along with the changed values and also broadcast to co-editors).
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactId Unique Id of the desired artefact
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateArtefactDTO} opts.updateArtefactDTO An UpdateArtefactDTO with the desired alterations to the artefact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtefactDTO} and HTTP response
     */
    v1EditionsEditionIdArtefactsArtefactIdPutWithHttpInfo(editionId, artefactId, opts) {
      opts = opts || {};
      let postBody = opts['updateArtefactDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactsArtefactIdPut");
      }
      // verify the required parameter 'artefactId' is set
      if (artefactId === undefined || artefactId === null) {
        throw new Error("Missing the required parameter 'artefactId' when calling v1EditionsEditionIdArtefactsArtefactIdPut");
      }

      let pathParams = {
        'editionId': editionId,
        'artefactId': artefactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArtefactDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefacts/{artefactId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the specified artefact.  There are many possible attributes that can be changed for  an artefact.  The caller should only input only those that  should be changed. Attributes with a null value will be ignored.  For instance, setting the mask to null or \"\" will result in  no changes to the current mask, and no value for the mask will  be returned (or broadcast). Likewise, the transformation, name,  or status message may be set to null and no change will be made  to those entities (though any unchanged values will be returned  along with the changed values and also broadcast to co-editors).
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactId Unique Id of the desired artefact
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateArtefactDTO} opts.updateArtefactDTO An UpdateArtefactDTO with the desired alterations to the artefact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtefactDTO}
     */
    v1EditionsEditionIdArtefactsArtefactIdPut(editionId, artefactId, opts) {
      return this.v1EditionsEditionIdArtefactsArtefactIdPutWithHttpInfo(editionId, artefactId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides a listing of all rois belonging to an artefact in the specified edition
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactId Unique Id of the desired artefact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterpretationRoiDTOList} and HTTP response
     */
    v1EditionsEditionIdArtefactsArtefactIdRoisGetWithHttpInfo(editionId, artefactId) {
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactsArtefactIdRoisGet");
      }
      // verify the required parameter 'artefactId' is set
      if (artefactId === undefined || artefactId === null) {
        throw new Error("Missing the required parameter 'artefactId' when calling v1EditionsEditionIdArtefactsArtefactIdRoisGet");
      }

      let pathParams = {
        'editionId': editionId,
        'artefactId': artefactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InterpretationRoiDTOList;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefacts/{artefactId}/rois', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides a listing of all rois belonging to an artefact in the specified edition
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactId Unique Id of the desired artefact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterpretationRoiDTOList}
     */
    v1EditionsEditionIdArtefactsArtefactIdRoisGet(editionId, artefactId) {
      return this.v1EditionsEditionIdArtefactsArtefactIdRoisGetWithHttpInfo(editionId, artefactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides a listing of text fragments that have text in the specified artefact.  With the optional query parameter \"suggested\", this endpoint will also return  any text fragment that the system suggests might have text in the artefact.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactId Unique Id of the desired artefact
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optional Add \"suggested\" to include possible matches suggested by the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtefactTextFragmentMatchListDTO} and HTTP response
     */
    v1EditionsEditionIdArtefactsArtefactIdTextFragmentsGetWithHttpInfo(editionId, artefactId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactsArtefactIdTextFragmentsGet");
      }
      // verify the required parameter 'artefactId' is set
      if (artefactId === undefined || artefactId === null) {
        throw new Error("Missing the required parameter 'artefactId' when calling v1EditionsEditionIdArtefactsArtefactIdTextFragmentsGet");
      }

      let pathParams = {
        'editionId': editionId,
        'artefactId': artefactId
      };
      let queryParams = {
        'optional': this.apiClient.buildCollectionParam(opts['optional'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArtefactTextFragmentMatchListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefacts/{artefactId}/text-fragments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides a listing of text fragments that have text in the specified artefact.  With the optional query parameter \"suggested\", this endpoint will also return  any text fragment that the system suggests might have text in the artefact.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Number} artefactId Unique Id of the desired artefact
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optional Add \"suggested\" to include possible matches suggested by the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtefactTextFragmentMatchListDTO}
     */
    v1EditionsEditionIdArtefactsArtefactIdTextFragmentsGet(editionId, artefactId, opts) {
      return this.v1EditionsEditionIdArtefactsArtefactIdTextFragmentsGetWithHttpInfo(editionId, artefactId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the positional data for a batch of artefacts
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchUpdateArtefactPlacementDTO} opts.batchUpdateArtefactPlacementDTO A BatchUpdateArtefactTransformDTO with a list of the desired updates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchUpdatedArtefactTransformDTO} and HTTP response
     */
    v1EditionsEditionIdArtefactsBatchTransformationPostWithHttpInfo(editionId, opts) {
      opts = opts || {};
      let postBody = opts['batchUpdateArtefactPlacementDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactsBatchTransformationPost");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BatchUpdatedArtefactTransformDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefacts/batch-transformation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the positional data for a batch of artefacts
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchUpdateArtefactPlacementDTO} opts.batchUpdateArtefactPlacementDTO A BatchUpdateArtefactTransformDTO with a list of the desired updates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchUpdatedArtefactTransformDTO}
     */
    v1EditionsEditionIdArtefactsBatchTransformationPost(editionId, opts) {
      return this.v1EditionsEditionIdArtefactsBatchTransformationPostWithHttpInfo(editionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provides a listing of all artefacts that are part of the specified edition
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optional Add \"masks\" to include artefact polygons and \"images\" to include image data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtefactListDTO} and HTTP response
     */
    v1EditionsEditionIdArtefactsGetWithHttpInfo(editionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactsGet");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
        'optional': this.apiClient.buildCollectionParam(opts['optional'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArtefactListDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides a listing of all artefacts that are part of the specified edition
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optional Add \"masks\" to include artefact polygons and \"images\" to include image data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtefactListDTO}
     */
    v1EditionsEditionIdArtefactsGet(editionId, opts) {
      return this.v1EditionsEditionIdArtefactsGetWithHttpInfo(editionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new artefact with the provided data.  If no mask is provided, a placeholder mask will be created with the values:  \"POLYGON((0 0,1 1,1 0,0 0))\" (the system requires a valid WKT polygon mask for  every artefact). It is not recommended to leave the mask, name, or work status  blank or null. It will often be advantageous to leave the transformation null  when first creating a new artefact.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateArtefactDTO} opts.createArtefactDTO A CreateArtefactDTO with the data for the new artefact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtefactDTO} and HTTP response
     */
    v1EditionsEditionIdArtefactsPostWithHttpInfo(editionId, opts) {
      opts = opts || {};
      let postBody = opts['createArtefactDTO'];
      // verify the required parameter 'editionId' is set
      if (editionId === undefined || editionId === null) {
        throw new Error("Missing the required parameter 'editionId' when calling v1EditionsEditionIdArtefactsPost");
      }

      let pathParams = {
        'editionId': editionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArtefactDTO;
      return this.apiClient.callApi(
        '/v1/editions/{editionId}/artefacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new artefact with the provided data.  If no mask is provided, a placeholder mask will be created with the values:  \"POLYGON((0 0,1 1,1 0,0 0))\" (the system requires a valid WKT polygon mask for  every artefact). It is not recommended to leave the mask, name, or work status  blank or null. It will often be advantageous to leave the transformation null  when first creating a new artefact.
     * @param {Number} editionId Unique Id of the desired edition
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateArtefactDTO} opts.createArtefactDTO A CreateArtefactDTO with the data for the new artefact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtefactDTO}
     */
    v1EditionsEditionIdArtefactsPost(editionId, opts) {
      return this.v1EditionsEditionIdArtefactsPostWithHttpInfo(editionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
