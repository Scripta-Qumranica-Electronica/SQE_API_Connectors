/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EditorDTO from './EditorDTO';
import TextFragmentDTO from './TextFragmentDTO';

/**
 * The TextEditionDTO model module.
 * @module model/TextEditionDTO
 * @version 0.7.0
 */
class TextEditionDTO {
    /**
     * Constructs a new <code>TextEditionDTO</code>.
     * @alias module:model/TextEditionDTO
     * @param manuscriptId {Number} 
     * @param editionName {String} 
     * @param editorId {Number} 
     * @param licence {String} 
     * @param editors {Object.<String, module:model/EditorDTO>} 
     * @param textFragments {Array.<module:model/TextFragmentDTO>} 
     */
    constructor(manuscriptId, editionName, editorId, licence, editors, textFragments) { 
        
        TextEditionDTO.initialize(this, manuscriptId, editionName, editorId, licence, editors, textFragments);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, manuscriptId, editionName, editorId, licence, editors, textFragments) { 
        obj['manuscriptId'] = manuscriptId;
        obj['editionName'] = editionName;
        obj['editorId'] = editorId;
        obj['licence'] = licence;
        obj['editors'] = editors;
        obj['textFragments'] = textFragments;
    }

    /**
     * Constructs a <code>TextEditionDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextEditionDTO} obj Optional instance to populate.
     * @return {module:model/TextEditionDTO} The populated <code>TextEditionDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextEditionDTO();

            if (data.hasOwnProperty('manuscriptId')) {
                obj['manuscriptId'] = ApiClient.convertToType(data['manuscriptId'], 'Number');
            }
            if (data.hasOwnProperty('editionName')) {
                obj['editionName'] = ApiClient.convertToType(data['editionName'], 'String');
            }
            if (data.hasOwnProperty('editorId')) {
                obj['editorId'] = ApiClient.convertToType(data['editorId'], 'Number');
            }
            if (data.hasOwnProperty('licence')) {
                obj['licence'] = ApiClient.convertToType(data['licence'], 'String');
            }
            if (data.hasOwnProperty('editors')) {
                obj['editors'] = ApiClient.convertToType(data['editors'], {'String': EditorDTO});
            }
            if (data.hasOwnProperty('textFragments')) {
                obj['textFragments'] = ApiClient.convertToType(data['textFragments'], [TextFragmentDTO]);
            }
        }
        return obj;
    }


}

/**
 * @member {Number} manuscriptId
 */
TextEditionDTO.prototype['manuscriptId'] = undefined;

/**
 * @member {String} editionName
 */
TextEditionDTO.prototype['editionName'] = undefined;

/**
 * @member {Number} editorId
 */
TextEditionDTO.prototype['editorId'] = undefined;

/**
 * @member {String} licence
 */
TextEditionDTO.prototype['licence'] = undefined;

/**
 * @member {Object.<String, module:model/EditorDTO>} editors
 */
TextEditionDTO.prototype['editors'] = undefined;

/**
 * @member {Array.<module:model/TextFragmentDTO>} textFragments
 */
TextEditionDTO.prototype['textFragments'] = undefined;






export default TextEditionDTO;

