/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SideDesignation from './SideDesignation';

/**
 * The CatalogueMatchDTO model module.
 * @module model/CatalogueMatchDTO
 * @version 0.7.2
 */
class CatalogueMatchDTO {
    /**
     * Constructs a new <code>CatalogueMatchDTO</code>.
     * @alias module:model/CatalogueMatchDTO
     * @param imageCatalogId {Number} 
     * @param institution {String} 
     * @param catalogueNumber1 {String} 
     * @param url {String} 
     * @param filename {String} 
     * @param suffix {String} 
     * @param thumbnail {String} 
     * @param license {String} 
     * @param iaaEditionCatalogueId {Number} 
     * @param manuscriptName {String} 
     * @param name {String} 
     * @param matchAuthor {String} 
     * @param matchId {Number} 
     * @param dateOfMatch {Date} 
     * @param imagedObjectId {String} 
     * @param manuscriptId {Number} 
     * @param editionName {String} 
     * @param editionVolume {String} 
     * @param editionLocation1 {String} 
     * @param editionLocation2 {String} 
     * @param editionSide {module:model/SideDesignation} 
     * @param textFragmentId {Number} 
     * @param editionId {Number} 
     */
    constructor(imageCatalogId, institution, catalogueNumber1, url, filename, suffix, thumbnail, license, iaaEditionCatalogueId, manuscriptName, name, matchAuthor, matchId, dateOfMatch, imagedObjectId, manuscriptId, editionName, editionVolume, editionLocation1, editionLocation2, editionSide, textFragmentId, editionId) { 
        
        CatalogueMatchDTO.initialize(this, imageCatalogId, institution, catalogueNumber1, url, filename, suffix, thumbnail, license, iaaEditionCatalogueId, manuscriptName, name, matchAuthor, matchId, dateOfMatch, imagedObjectId, manuscriptId, editionName, editionVolume, editionLocation1, editionLocation2, editionSide, textFragmentId, editionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageCatalogId, institution, catalogueNumber1, url, filename, suffix, thumbnail, license, iaaEditionCatalogueId, manuscriptName, name, matchAuthor, matchId, dateOfMatch, imagedObjectId, manuscriptId, editionName, editionVolume, editionLocation1, editionLocation2, editionSide, textFragmentId, editionId) { 
        obj['imageCatalogId'] = imageCatalogId;
        obj['institution'] = institution;
        obj['catalogueNumber1'] = catalogueNumber1;
        obj['url'] = url;
        obj['filename'] = filename;
        obj['suffix'] = suffix;
        obj['thumbnail'] = thumbnail;
        obj['license'] = license;
        obj['iaaEditionCatalogueId'] = iaaEditionCatalogueId;
        obj['manuscriptName'] = manuscriptName;
        obj['name'] = name;
        obj['matchAuthor'] = matchAuthor;
        obj['matchId'] = matchId;
        obj['dateOfMatch'] = dateOfMatch;
        obj['imagedObjectId'] = imagedObjectId;
        obj['manuscriptId'] = manuscriptId;
        obj['editionName'] = editionName;
        obj['editionVolume'] = editionVolume;
        obj['editionLocation1'] = editionLocation1;
        obj['editionLocation2'] = editionLocation2;
        obj['editionSide'] = editionSide;
        obj['textFragmentId'] = textFragmentId;
        obj['editionId'] = editionId;
    }

    /**
     * Constructs a <code>CatalogueMatchDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogueMatchDTO} obj Optional instance to populate.
     * @return {module:model/CatalogueMatchDTO} The populated <code>CatalogueMatchDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogueMatchDTO();

            if (data.hasOwnProperty('imageCatalogId')) {
                obj['imageCatalogId'] = ApiClient.convertToType(data['imageCatalogId'], 'Number');
            }
            if (data.hasOwnProperty('institution')) {
                obj['institution'] = ApiClient.convertToType(data['institution'], 'String');
            }
            if (data.hasOwnProperty('catalogueNumber1')) {
                obj['catalogueNumber1'] = ApiClient.convertToType(data['catalogueNumber1'], 'String');
            }
            if (data.hasOwnProperty('catalogueNumber2')) {
                obj['catalogueNumber2'] = ApiClient.convertToType(data['catalogueNumber2'], 'String');
            }
            if (data.hasOwnProperty('proxy')) {
                obj['proxy'] = ApiClient.convertToType(data['proxy'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('suffix')) {
                obj['suffix'] = ApiClient.convertToType(data['suffix'], 'String');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('iaaEditionCatalogueId')) {
                obj['iaaEditionCatalogueId'] = ApiClient.convertToType(data['iaaEditionCatalogueId'], 'Number');
            }
            if (data.hasOwnProperty('manuscriptName')) {
                obj['manuscriptName'] = ApiClient.convertToType(data['manuscriptName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('matchAuthor')) {
                obj['matchAuthor'] = ApiClient.convertToType(data['matchAuthor'], 'String');
            }
            if (data.hasOwnProperty('matchConfirmationAuthor')) {
                obj['matchConfirmationAuthor'] = ApiClient.convertToType(data['matchConfirmationAuthor'], 'String');
            }
            if (data.hasOwnProperty('matchId')) {
                obj['matchId'] = ApiClient.convertToType(data['matchId'], 'Number');
            }
            if (data.hasOwnProperty('dateOfMatch')) {
                obj['dateOfMatch'] = ApiClient.convertToType(data['dateOfMatch'], 'Date');
            }
            if (data.hasOwnProperty('dateOfConfirmation')) {
                obj['dateOfConfirmation'] = ApiClient.convertToType(data['dateOfConfirmation'], 'Date');
            }
            if (data.hasOwnProperty('catalogSide')) {
                obj['catalogSide'] = ApiClient.convertToType(data['catalogSide'], SideDesignation);
            }
            if (data.hasOwnProperty('imagedObjectId')) {
                obj['imagedObjectId'] = ApiClient.convertToType(data['imagedObjectId'], 'String');
            }
            if (data.hasOwnProperty('manuscriptId')) {
                obj['manuscriptId'] = ApiClient.convertToType(data['manuscriptId'], 'Number');
            }
            if (data.hasOwnProperty('editionName')) {
                obj['editionName'] = ApiClient.convertToType(data['editionName'], 'String');
            }
            if (data.hasOwnProperty('editionVolume')) {
                obj['editionVolume'] = ApiClient.convertToType(data['editionVolume'], 'String');
            }
            if (data.hasOwnProperty('editionLocation1')) {
                obj['editionLocation1'] = ApiClient.convertToType(data['editionLocation1'], 'String');
            }
            if (data.hasOwnProperty('editionLocation2')) {
                obj['editionLocation2'] = ApiClient.convertToType(data['editionLocation2'], 'String');
            }
            if (data.hasOwnProperty('editionSide')) {
                obj['editionSide'] = ApiClient.convertToType(data['editionSide'], SideDesignation);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('textFragmentId')) {
                obj['textFragmentId'] = ApiClient.convertToType(data['textFragmentId'], 'Number');
            }
            if (data.hasOwnProperty('editionId')) {
                obj['editionId'] = ApiClient.convertToType(data['editionId'], 'Number');
            }
            if (data.hasOwnProperty('confirmed')) {
                obj['confirmed'] = ApiClient.convertToType(data['confirmed'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} imageCatalogId
 */
CatalogueMatchDTO.prototype['imageCatalogId'] = undefined;

/**
 * @member {String} institution
 */
CatalogueMatchDTO.prototype['institution'] = undefined;

/**
 * @member {String} catalogueNumber1
 */
CatalogueMatchDTO.prototype['catalogueNumber1'] = undefined;

/**
 * @member {String} catalogueNumber2
 */
CatalogueMatchDTO.prototype['catalogueNumber2'] = undefined;

/**
 * @member {String} proxy
 */
CatalogueMatchDTO.prototype['proxy'] = undefined;

/**
 * @member {String} url
 */
CatalogueMatchDTO.prototype['url'] = undefined;

/**
 * @member {String} filename
 */
CatalogueMatchDTO.prototype['filename'] = undefined;

/**
 * @member {String} suffix
 */
CatalogueMatchDTO.prototype['suffix'] = undefined;

/**
 * @member {String} thumbnail
 */
CatalogueMatchDTO.prototype['thumbnail'] = undefined;

/**
 * @member {String} license
 */
CatalogueMatchDTO.prototype['license'] = undefined;

/**
 * @member {Number} iaaEditionCatalogueId
 */
CatalogueMatchDTO.prototype['iaaEditionCatalogueId'] = undefined;

/**
 * @member {String} manuscriptName
 */
CatalogueMatchDTO.prototype['manuscriptName'] = undefined;

/**
 * @member {String} name
 */
CatalogueMatchDTO.prototype['name'] = undefined;

/**
 * @member {String} matchAuthor
 */
CatalogueMatchDTO.prototype['matchAuthor'] = undefined;

/**
 * @member {String} matchConfirmationAuthor
 */
CatalogueMatchDTO.prototype['matchConfirmationAuthor'] = undefined;

/**
 * @member {Number} matchId
 */
CatalogueMatchDTO.prototype['matchId'] = undefined;

/**
 * @member {Date} dateOfMatch
 */
CatalogueMatchDTO.prototype['dateOfMatch'] = undefined;

/**
 * @member {Date} dateOfConfirmation
 */
CatalogueMatchDTO.prototype['dateOfConfirmation'] = undefined;

/**
 * @member {module:model/SideDesignation} catalogSide
 */
CatalogueMatchDTO.prototype['catalogSide'] = undefined;

/**
 * @member {String} imagedObjectId
 */
CatalogueMatchDTO.prototype['imagedObjectId'] = undefined;

/**
 * @member {Number} manuscriptId
 */
CatalogueMatchDTO.prototype['manuscriptId'] = undefined;

/**
 * @member {String} editionName
 */
CatalogueMatchDTO.prototype['editionName'] = undefined;

/**
 * @member {String} editionVolume
 */
CatalogueMatchDTO.prototype['editionVolume'] = undefined;

/**
 * @member {String} editionLocation1
 */
CatalogueMatchDTO.prototype['editionLocation1'] = undefined;

/**
 * @member {String} editionLocation2
 */
CatalogueMatchDTO.prototype['editionLocation2'] = undefined;

/**
 * @member {module:model/SideDesignation} editionSide
 */
CatalogueMatchDTO.prototype['editionSide'] = undefined;

/**
 * @member {String} comment
 */
CatalogueMatchDTO.prototype['comment'] = undefined;

/**
 * @member {Number} textFragmentId
 */
CatalogueMatchDTO.prototype['textFragmentId'] = undefined;

/**
 * @member {Number} editionId
 */
CatalogueMatchDTO.prototype['editionId'] = undefined;

/**
 * @member {Boolean} confirmed
 */
CatalogueMatchDTO.prototype['confirmed'] = undefined;






export default CatalogueMatchDTO;

