/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Direction from './Direction';
import Lighting from './Lighting';
import SideDesignation from './SideDesignation';

/**
 * The ImageDTO model module.
 * @module model/ImageDTO
 * @version v1
 */
class ImageDTO {
    /**
     * Constructs a new <code>ImageDTO</code>.
     * @alias module:model/ImageDTO
     * @param id {Number} 
     * @param url {String} 
     * @param lightingType {module:model/Lighting} 
     * @param lightingDirection {module:model/Direction} 
     * @param waveLength {Array.<String>} 
     * @param type {String} 
     * @param side {module:model/SideDesignation} 
     * @param ppi {Number} 
     * @param master {Boolean} 
     * @param catalogNumber {Number} 
     */
    constructor(id, url, lightingType, lightingDirection, waveLength, type, side, ppi, master, catalogNumber) { 
        
        ImageDTO.initialize(this, id, url, lightingType, lightingDirection, waveLength, type, side, ppi, master, catalogNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, url, lightingType, lightingDirection, waveLength, type, side, ppi, master, catalogNumber) { 
        obj['id'] = id;
        obj['url'] = url;
        obj['lightingType'] = lightingType;
        obj['lightingDirection'] = lightingDirection;
        obj['waveLength'] = waveLength;
        obj['type'] = type;
        obj['side'] = side;
        obj['ppi'] = ppi;
        obj['master'] = master;
        obj['catalogNumber'] = catalogNumber;
    }

    /**
     * Constructs a <code>ImageDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageDTO} obj Optional instance to populate.
     * @return {module:model/ImageDTO} The populated <code>ImageDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageDTO();

            if (data.hasOwnProperty('imageToImageMapEditorId')) {
                obj['imageToImageMapEditorId'] = ApiClient.convertToType(data['imageToImageMapEditorId'], 'Number');
            }
            if (data.hasOwnProperty('regionInMasterImage')) {
                obj['regionInMasterImage'] = ApiClient.convertToType(data['regionInMasterImage'], 'String');
            }
            if (data.hasOwnProperty('regionInImage')) {
                obj['regionInImage'] = ApiClient.convertToType(data['regionInImage'], 'String');
            }
            if (data.hasOwnProperty('transformToMaster')) {
                obj['transformToMaster'] = ApiClient.convertToType(data['transformToMaster'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('lightingType')) {
                obj['lightingType'] = ApiClient.convertToType(data['lightingType'], Lighting);
            }
            if (data.hasOwnProperty('lightingDirection')) {
                obj['lightingDirection'] = ApiClient.convertToType(data['lightingDirection'], Direction);
            }
            if (data.hasOwnProperty('waveLength')) {
                obj['waveLength'] = ApiClient.convertToType(data['waveLength'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('side')) {
                obj['side'] = ApiClient.convertToType(data['side'], SideDesignation);
            }
            if (data.hasOwnProperty('ppi')) {
                obj['ppi'] = ApiClient.convertToType(data['ppi'], 'Number');
            }
            if (data.hasOwnProperty('master')) {
                obj['master'] = ApiClient.convertToType(data['master'], 'Boolean');
            }
            if (data.hasOwnProperty('catalogNumber')) {
                obj['catalogNumber'] = ApiClient.convertToType(data['catalogNumber'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} imageToImageMapEditorId
 */
ImageDTO.prototype['imageToImageMapEditorId'] = undefined;

/**
 * @member {String} regionInMasterImage
 */
ImageDTO.prototype['regionInMasterImage'] = undefined;

/**
 * @member {String} regionInImage
 */
ImageDTO.prototype['regionInImage'] = undefined;

/**
 * @member {String} transformToMaster
 */
ImageDTO.prototype['transformToMaster'] = undefined;

/**
 * @member {Number} id
 */
ImageDTO.prototype['id'] = undefined;

/**
 * @member {String} url
 */
ImageDTO.prototype['url'] = undefined;

/**
 * @member {module:model/Lighting} lightingType
 */
ImageDTO.prototype['lightingType'] = undefined;

/**
 * @member {module:model/Direction} lightingDirection
 */
ImageDTO.prototype['lightingDirection'] = undefined;

/**
 * @member {Array.<String>} waveLength
 */
ImageDTO.prototype['waveLength'] = undefined;

/**
 * @member {String} type
 */
ImageDTO.prototype['type'] = undefined;

/**
 * @member {module:model/SideDesignation} side
 */
ImageDTO.prototype['side'] = undefined;

/**
 * @member {Number} ppi
 */
ImageDTO.prototype['ppi'] = undefined;

/**
 * @member {Boolean} master
 */
ImageDTO.prototype['master'] = undefined;

/**
 * @member {Number} catalogNumber
 */
ImageDTO.prototype['catalogNumber'] = undefined;






export default ImageDTO;

