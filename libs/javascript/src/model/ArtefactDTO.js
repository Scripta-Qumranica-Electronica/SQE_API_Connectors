/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlacementDTO from './PlacementDTO';
import SideDesignation from './SideDesignation';

/**
 * The ArtefactDTO model module.
 * @module model/ArtefactDTO
 * @version 0.7.2
 */
class ArtefactDTO {
    /**
     * Constructs a new <code>ArtefactDTO</code>.
     * @alias module:model/ArtefactDTO
     * @param editionId {Number} 
     * @param imagedObjectId {String} 
     * @param imageId {Number} 
     * @param artefactDataEditorId {Number} 
     * @param mask {String} 
     * @param artefactMaskEditorId {Number} 
     * @param isPlaced {Boolean} 
     * @param placement {module:model/PlacementDTO} 
     * @param side {module:model/SideDesignation} 
     * @param id {Number} 
     * @param name {String} 
     */
    constructor(editionId, imagedObjectId, imageId, artefactDataEditorId, mask, artefactMaskEditorId, isPlaced, placement, side, id, name) { 
        
        ArtefactDTO.initialize(this, editionId, imagedObjectId, imageId, artefactDataEditorId, mask, artefactMaskEditorId, isPlaced, placement, side, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, editionId, imagedObjectId, imageId, artefactDataEditorId, mask, artefactMaskEditorId, isPlaced, placement, side, id, name) { 
        obj['editionId'] = editionId;
        obj['imagedObjectId'] = imagedObjectId;
        obj['imageId'] = imageId;
        obj['artefactDataEditorId'] = artefactDataEditorId;
        obj['mask'] = mask;
        obj['artefactMaskEditorId'] = artefactMaskEditorId;
        obj['isPlaced'] = isPlaced;
        obj['placement'] = placement;
        obj['side'] = side;
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ArtefactDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArtefactDTO} obj Optional instance to populate.
     * @return {module:model/ArtefactDTO} The populated <code>ArtefactDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArtefactDTO();

            if (data.hasOwnProperty('editionId')) {
                obj['editionId'] = ApiClient.convertToType(data['editionId'], 'Number');
            }
            if (data.hasOwnProperty('imagedObjectId')) {
                obj['imagedObjectId'] = ApiClient.convertToType(data['imagedObjectId'], 'String');
            }
            if (data.hasOwnProperty('imageId')) {
                obj['imageId'] = ApiClient.convertToType(data['imageId'], 'Number');
            }
            if (data.hasOwnProperty('artefactDataEditorId')) {
                obj['artefactDataEditorId'] = ApiClient.convertToType(data['artefactDataEditorId'], 'Number');
            }
            if (data.hasOwnProperty('mask')) {
                obj['mask'] = ApiClient.convertToType(data['mask'], 'String');
            }
            if (data.hasOwnProperty('artefactMaskEditorId')) {
                obj['artefactMaskEditorId'] = ApiClient.convertToType(data['artefactMaskEditorId'], 'Number');
            }
            if (data.hasOwnProperty('isPlaced')) {
                obj['isPlaced'] = ApiClient.convertToType(data['isPlaced'], 'Boolean');
            }
            if (data.hasOwnProperty('placement')) {
                obj['placement'] = ApiClient.convertToType(data['placement'], PlacementDTO);
            }
            if (data.hasOwnProperty('artefactPlacementEditorId')) {
                obj['artefactPlacementEditorId'] = ApiClient.convertToType(data['artefactPlacementEditorId'], 'Number');
            }
            if (data.hasOwnProperty('side')) {
                obj['side'] = ApiClient.convertToType(data['side'], SideDesignation);
            }
            if (data.hasOwnProperty('statusMessage')) {
                obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} editionId
 */
ArtefactDTO.prototype['editionId'] = undefined;

/**
 * @member {String} imagedObjectId
 */
ArtefactDTO.prototype['imagedObjectId'] = undefined;

/**
 * @member {Number} imageId
 */
ArtefactDTO.prototype['imageId'] = undefined;

/**
 * @member {Number} artefactDataEditorId
 */
ArtefactDTO.prototype['artefactDataEditorId'] = undefined;

/**
 * @member {String} mask
 */
ArtefactDTO.prototype['mask'] = undefined;

/**
 * @member {Number} artefactMaskEditorId
 */
ArtefactDTO.prototype['artefactMaskEditorId'] = undefined;

/**
 * @member {Boolean} isPlaced
 */
ArtefactDTO.prototype['isPlaced'] = undefined;

/**
 * @member {module:model/PlacementDTO} placement
 */
ArtefactDTO.prototype['placement'] = undefined;

/**
 * @member {Number} artefactPlacementEditorId
 */
ArtefactDTO.prototype['artefactPlacementEditorId'] = undefined;

/**
 * @member {module:model/SideDesignation} side
 */
ArtefactDTO.prototype['side'] = undefined;

/**
 * @member {String} statusMessage
 */
ArtefactDTO.prototype['statusMessage'] = undefined;

/**
 * @member {Number} id
 */
ArtefactDTO.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ArtefactDTO.prototype['name'] = undefined;






export default ArtefactDTO;

