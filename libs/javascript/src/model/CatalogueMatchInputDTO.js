/**
 * SQE API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SideDesignation from './SideDesignation';

/**
 * The CatalogueMatchInputDTO model module.
 * @module model/CatalogueMatchInputDTO
 * @version 0.7.0
 */
class CatalogueMatchInputDTO {
    /**
     * Constructs a new <code>CatalogueMatchInputDTO</code>.
     * @alias module:model/CatalogueMatchInputDTO
     * @param imagedObjectId {String} 
     * @param manuscriptId {Number} 
     * @param editionName {String} 
     * @param editionVolume {String} 
     * @param editionLocation1 {String} 
     * @param editionLocation2 {String} 
     * @param editionSide {module:model/SideDesignation} 
     * @param textFragmentId {Number} 
     * @param editionId {Number} 
     */
    constructor(imagedObjectId, manuscriptId, editionName, editionVolume, editionLocation1, editionLocation2, editionSide, textFragmentId, editionId) { 
        
        CatalogueMatchInputDTO.initialize(this, imagedObjectId, manuscriptId, editionName, editionVolume, editionLocation1, editionLocation2, editionSide, textFragmentId, editionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imagedObjectId, manuscriptId, editionName, editionVolume, editionLocation1, editionLocation2, editionSide, textFragmentId, editionId) { 
        obj['imagedObjectId'] = imagedObjectId;
        obj['manuscriptId'] = manuscriptId;
        obj['editionName'] = editionName;
        obj['editionVolume'] = editionVolume;
        obj['editionLocation1'] = editionLocation1;
        obj['editionLocation2'] = editionLocation2;
        obj['editionSide'] = editionSide;
        obj['textFragmentId'] = textFragmentId;
        obj['editionId'] = editionId;
    }

    /**
     * Constructs a <code>CatalogueMatchInputDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogueMatchInputDTO} obj Optional instance to populate.
     * @return {module:model/CatalogueMatchInputDTO} The populated <code>CatalogueMatchInputDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogueMatchInputDTO();

            if (data.hasOwnProperty('catalogSide')) {
                obj['catalogSide'] = ApiClient.convertToType(data['catalogSide'], SideDesignation);
            }
            if (data.hasOwnProperty('imagedObjectId')) {
                obj['imagedObjectId'] = ApiClient.convertToType(data['imagedObjectId'], 'String');
            }
            if (data.hasOwnProperty('manuscriptId')) {
                obj['manuscriptId'] = ApiClient.convertToType(data['manuscriptId'], 'Number');
            }
            if (data.hasOwnProperty('editionName')) {
                obj['editionName'] = ApiClient.convertToType(data['editionName'], 'String');
            }
            if (data.hasOwnProperty('editionVolume')) {
                obj['editionVolume'] = ApiClient.convertToType(data['editionVolume'], 'String');
            }
            if (data.hasOwnProperty('editionLocation1')) {
                obj['editionLocation1'] = ApiClient.convertToType(data['editionLocation1'], 'String');
            }
            if (data.hasOwnProperty('editionLocation2')) {
                obj['editionLocation2'] = ApiClient.convertToType(data['editionLocation2'], 'String');
            }
            if (data.hasOwnProperty('editionSide')) {
                obj['editionSide'] = ApiClient.convertToType(data['editionSide'], SideDesignation);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('textFragmentId')) {
                obj['textFragmentId'] = ApiClient.convertToType(data['textFragmentId'], 'Number');
            }
            if (data.hasOwnProperty('editionId')) {
                obj['editionId'] = ApiClient.convertToType(data['editionId'], 'Number');
            }
            if (data.hasOwnProperty('confirmed')) {
                obj['confirmed'] = ApiClient.convertToType(data['confirmed'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/SideDesignation} catalogSide
 */
CatalogueMatchInputDTO.prototype['catalogSide'] = undefined;

/**
 * @member {String} imagedObjectId
 */
CatalogueMatchInputDTO.prototype['imagedObjectId'] = undefined;

/**
 * @member {Number} manuscriptId
 */
CatalogueMatchInputDTO.prototype['manuscriptId'] = undefined;

/**
 * @member {String} editionName
 */
CatalogueMatchInputDTO.prototype['editionName'] = undefined;

/**
 * @member {String} editionVolume
 */
CatalogueMatchInputDTO.prototype['editionVolume'] = undefined;

/**
 * @member {String} editionLocation1
 */
CatalogueMatchInputDTO.prototype['editionLocation1'] = undefined;

/**
 * @member {String} editionLocation2
 */
CatalogueMatchInputDTO.prototype['editionLocation2'] = undefined;

/**
 * @member {module:model/SideDesignation} editionSide
 */
CatalogueMatchInputDTO.prototype['editionSide'] = undefined;

/**
 * @member {String} comment
 */
CatalogueMatchInputDTO.prototype['comment'] = undefined;

/**
 * @member {Number} textFragmentId
 */
CatalogueMatchInputDTO.prototype['textFragmentId'] = undefined;

/**
 * @member {Number} editionId
 */
CatalogueMatchInputDTO.prototype['editionId'] = undefined;

/**
 * @member {Boolean} confirmed
 */
CatalogueMatchInputDTO.prototype['confirmed'] = undefined;






export default CatalogueMatchInputDTO;

